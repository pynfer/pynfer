Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> file_input
Rule 1     file_input -> suite ENDMARKER
Rule 2     block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT
Rule 3     block -> block_keyword fragment COLON suite
Rule 4     block -> block_keyword fragment COLON NEWLINE
Rule 5     block_keyword -> CLASS
Rule 6     block_keyword -> DEF
Rule 7     block_keyword -> IF
Rule 8     block_keyword -> ELIF
Rule 9     block_keyword -> ELSE
Rule 10    block_keyword -> TRY
Rule 11    block_keyword -> EXCEPT
Rule 12    block_keyword -> FINALLY
Rule 13    block_keyword -> WITH
Rule 14    block_keyword -> WHILE
Rule 15    block_keyword -> FOR
Rule 16    suite -> stmt
Rule 17    suite -> suite stmt
Rule 18    stmt -> fragment NEWLINE
Rule 19    stmt -> fragment
Rule 20    stmt -> NEWLINE
Rule 21    stmt -> block
Rule 22    fragment -> fragment LBRACE
Rule 23    fragment -> fragment RBRACE
Rule 24    fragment -> fragment STRING_END
Rule 25    fragment -> fragment STRING_CONTINUE
Rule 26    fragment -> fragment STRING
Rule 27    fragment -> fragment STRING_START_TRIPLE
Rule 28    fragment -> fragment WS
Rule 29    fragment -> fragment STRING_START_SINGLE
Rule 30    fragment -> fragment NUMBER
Rule 31    fragment -> fragment NAME
Rule 32    fragment -> fragment LPAR
Rule 33    fragment -> fragment RPAR
Rule 34    fragment -> fragment OPERATOR
Rule 35    fragment -> fragment LSQB
Rule 36    fragment -> fragment RSQB
Rule 37    fragment -> fragment COLON
Rule 38    fragment -> fragment block_keyword
Rule 39    fragment -> fragment PERIOD
Rule 40    fragment -> fragment RANGE
Rule 41    fragment -> block_keyword
Rule 42    fragment -> LBRACE
Rule 43    fragment -> RBRACE
Rule 44    fragment -> STRING_END
Rule 45    fragment -> STRING_CONTINUE
Rule 46    fragment -> STRING
Rule 47    fragment -> STRING_START_TRIPLE
Rule 48    fragment -> WS
Rule 49    fragment -> STRING_START_SINGLE
Rule 50    fragment -> NUMBER
Rule 51    fragment -> NAME
Rule 52    fragment -> LPAR
Rule 53    fragment -> RPAR
Rule 54    fragment -> LSQB
Rule 55    fragment -> RSQB
Rule 56    fragment -> COLON
Rule 57    fragment -> OPERATOR
Rule 58    fragment -> COMMENT
Rule 59    fragment -> RANGE

Terminals, with rules where they appear

CLASS                : 5
COLON                : 2 3 4 37 56
COMMENT              : 58
DEDENT               : 2
DEF                  : 6
ELIF                 : 8
ELSE                 : 9
ENDMARKER            : 1
EXCEPT               : 11
FINALLY              : 12
FOR                  : 15
IF                   : 7
INDENT               : 2
LBRACE               : 22 42
LPAR                 : 32 52
LSQB                 : 35 54
NAME                 : 31 51
NEWLINE              : 2 4 18 20
NUMBER               : 30 50
OPERATOR             : 34 57
PERIOD               : 39
RANGE                : 40 59
RBRACE               : 23 43
RPAR                 : 33 53
RSQB                 : 36 55
STRING               : 26 46
STRING_CONTINUE      : 25 45
STRING_END           : 24 44
STRING_START_SINGLE  : 29 49
STRING_START_TRIPLE  : 27 47
TRY                  : 10
WHILE                : 14
WITH                 : 13
WS                   : 28 48
error                : 

Nonterminals, with rules where they appear

block                : 21
block_keyword        : 2 3 4 38 41
file_input           : 0
fragment             : 2 3 4 18 19 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
stmt                 : 16 17
suite                : 1 2 3 17

Parsing method: LALR

state 0

    (0) S' -> . file_input
    (1) file_input -> . suite ENDMARKER
    (16) suite -> . stmt
    (17) suite -> . suite stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment
    (20) stmt -> . NEWLINE
    (21) stmt -> . block
    (22) fragment -> . fragment LBRACE
    (23) fragment -> . fragment RBRACE
    (24) fragment -> . fragment STRING_END
    (25) fragment -> . fragment STRING_CONTINUE
    (26) fragment -> . fragment STRING
    (27) fragment -> . fragment STRING_START_TRIPLE
    (28) fragment -> . fragment WS
    (29) fragment -> . fragment STRING_START_SINGLE
    (30) fragment -> . fragment NUMBER
    (31) fragment -> . fragment NAME
    (32) fragment -> . fragment LPAR
    (33) fragment -> . fragment RPAR
    (34) fragment -> . fragment OPERATOR
    (35) fragment -> . fragment LSQB
    (36) fragment -> . fragment RSQB
    (37) fragment -> . fragment COLON
    (38) fragment -> . fragment block_keyword
    (39) fragment -> . fragment PERIOD
    (40) fragment -> . fragment RANGE
    (41) fragment -> . block_keyword
    (42) fragment -> . LBRACE
    (43) fragment -> . RBRACE
    (44) fragment -> . STRING_END
    (45) fragment -> . STRING_CONTINUE
    (46) fragment -> . STRING
    (47) fragment -> . STRING_START_TRIPLE
    (48) fragment -> . WS
    (49) fragment -> . STRING_START_SINGLE
    (50) fragment -> . NUMBER
    (51) fragment -> . NAME
    (52) fragment -> . LPAR
    (53) fragment -> . RPAR
    (54) fragment -> . LSQB
    (55) fragment -> . RSQB
    (56) fragment -> . COLON
    (57) fragment -> . OPERATOR
    (58) fragment -> . COMMENT
    (59) fragment -> . RANGE
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

    NEWLINE         shift and go to state 11
    LBRACE          shift and go to state 31
    RBRACE          shift and go to state 19
    STRING_END      shift and go to state 16
    STRING_CONTINUE shift and go to state 35
    STRING          shift and go to state 9
    STRING_START_TRIPLE shift and go to state 2
    WS              shift and go to state 6
    STRING_START_SINGLE shift and go to state 26
    NUMBER          shift and go to state 3
    NAME            shift and go to state 32
    LPAR            shift and go to state 1
    RPAR            shift and go to state 4
    LSQB            shift and go to state 29
    RSQB            shift and go to state 17
    COLON           shift and go to state 14
    OPERATOR        shift and go to state 28
    COMMENT         shift and go to state 10
    RANGE           shift and go to state 25
    CLASS           shift and go to state 18
    DEF             shift and go to state 8
    IF              shift and go to state 30
    ELIF            shift and go to state 13
    ELSE            shift and go to state 23
    TRY             shift and go to state 24
    EXCEPT          shift and go to state 12
    FINALLY         shift and go to state 34
    WITH            shift and go to state 7
    WHILE           shift and go to state 5
    FOR             shift and go to state 20

    fragment                       shift and go to state 21
    file_input                     shift and go to state 33
    stmt                           shift and go to state 22
    block_keyword                  shift and go to state 27
    suite                          shift and go to state 15
    block                          shift and go to state 36

state 1

    (52) fragment -> LPAR .

    NEWLINE         reduce using rule 52 (fragment -> LPAR .)
    LBRACE          reduce using rule 52 (fragment -> LPAR .)
    RBRACE          reduce using rule 52 (fragment -> LPAR .)
    STRING_END      reduce using rule 52 (fragment -> LPAR .)
    STRING_CONTINUE reduce using rule 52 (fragment -> LPAR .)
    STRING          reduce using rule 52 (fragment -> LPAR .)
    STRING_START_TRIPLE reduce using rule 52 (fragment -> LPAR .)
    WS              reduce using rule 52 (fragment -> LPAR .)
    STRING_START_SINGLE reduce using rule 52 (fragment -> LPAR .)
    NUMBER          reduce using rule 52 (fragment -> LPAR .)
    NAME            reduce using rule 52 (fragment -> LPAR .)
    LPAR            reduce using rule 52 (fragment -> LPAR .)
    RPAR            reduce using rule 52 (fragment -> LPAR .)
    OPERATOR        reduce using rule 52 (fragment -> LPAR .)
    LSQB            reduce using rule 52 (fragment -> LPAR .)
    RSQB            reduce using rule 52 (fragment -> LPAR .)
    COLON           reduce using rule 52 (fragment -> LPAR .)
    PERIOD          reduce using rule 52 (fragment -> LPAR .)
    RANGE           reduce using rule 52 (fragment -> LPAR .)
    CLASS           reduce using rule 52 (fragment -> LPAR .)
    DEF             reduce using rule 52 (fragment -> LPAR .)
    IF              reduce using rule 52 (fragment -> LPAR .)
    ELIF            reduce using rule 52 (fragment -> LPAR .)
    ELSE            reduce using rule 52 (fragment -> LPAR .)
    TRY             reduce using rule 52 (fragment -> LPAR .)
    EXCEPT          reduce using rule 52 (fragment -> LPAR .)
    FINALLY         reduce using rule 52 (fragment -> LPAR .)
    WITH            reduce using rule 52 (fragment -> LPAR .)
    WHILE           reduce using rule 52 (fragment -> LPAR .)
    FOR             reduce using rule 52 (fragment -> LPAR .)
    COMMENT         reduce using rule 52 (fragment -> LPAR .)
    ENDMARKER       reduce using rule 52 (fragment -> LPAR .)
    DEDENT          reduce using rule 52 (fragment -> LPAR .)


state 2

    (47) fragment -> STRING_START_TRIPLE .

    NEWLINE         reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    LBRACE          reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    RBRACE          reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    STRING_END      reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    STRING_CONTINUE reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    STRING          reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    STRING_START_TRIPLE reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    WS              reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    STRING_START_SINGLE reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    NUMBER          reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    NAME            reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    LPAR            reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    RPAR            reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    OPERATOR        reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    LSQB            reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    RSQB            reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    COLON           reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    PERIOD          reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    RANGE           reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    CLASS           reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    DEF             reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    IF              reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    ELIF            reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    ELSE            reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    TRY             reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    EXCEPT          reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    FINALLY         reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    WITH            reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    WHILE           reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    FOR             reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    COMMENT         reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    ENDMARKER       reduce using rule 47 (fragment -> STRING_START_TRIPLE .)
    DEDENT          reduce using rule 47 (fragment -> STRING_START_TRIPLE .)


state 3

    (50) fragment -> NUMBER .

    NEWLINE         reduce using rule 50 (fragment -> NUMBER .)
    LBRACE          reduce using rule 50 (fragment -> NUMBER .)
    RBRACE          reduce using rule 50 (fragment -> NUMBER .)
    STRING_END      reduce using rule 50 (fragment -> NUMBER .)
    STRING_CONTINUE reduce using rule 50 (fragment -> NUMBER .)
    STRING          reduce using rule 50 (fragment -> NUMBER .)
    STRING_START_TRIPLE reduce using rule 50 (fragment -> NUMBER .)
    WS              reduce using rule 50 (fragment -> NUMBER .)
    STRING_START_SINGLE reduce using rule 50 (fragment -> NUMBER .)
    NUMBER          reduce using rule 50 (fragment -> NUMBER .)
    NAME            reduce using rule 50 (fragment -> NUMBER .)
    LPAR            reduce using rule 50 (fragment -> NUMBER .)
    RPAR            reduce using rule 50 (fragment -> NUMBER .)
    OPERATOR        reduce using rule 50 (fragment -> NUMBER .)
    LSQB            reduce using rule 50 (fragment -> NUMBER .)
    RSQB            reduce using rule 50 (fragment -> NUMBER .)
    COLON           reduce using rule 50 (fragment -> NUMBER .)
    PERIOD          reduce using rule 50 (fragment -> NUMBER .)
    RANGE           reduce using rule 50 (fragment -> NUMBER .)
    CLASS           reduce using rule 50 (fragment -> NUMBER .)
    DEF             reduce using rule 50 (fragment -> NUMBER .)
    IF              reduce using rule 50 (fragment -> NUMBER .)
    ELIF            reduce using rule 50 (fragment -> NUMBER .)
    ELSE            reduce using rule 50 (fragment -> NUMBER .)
    TRY             reduce using rule 50 (fragment -> NUMBER .)
    EXCEPT          reduce using rule 50 (fragment -> NUMBER .)
    FINALLY         reduce using rule 50 (fragment -> NUMBER .)
    WITH            reduce using rule 50 (fragment -> NUMBER .)
    WHILE           reduce using rule 50 (fragment -> NUMBER .)
    FOR             reduce using rule 50 (fragment -> NUMBER .)
    COMMENT         reduce using rule 50 (fragment -> NUMBER .)
    ENDMARKER       reduce using rule 50 (fragment -> NUMBER .)
    DEDENT          reduce using rule 50 (fragment -> NUMBER .)


state 4

    (53) fragment -> RPAR .

    NEWLINE         reduce using rule 53 (fragment -> RPAR .)
    LBRACE          reduce using rule 53 (fragment -> RPAR .)
    RBRACE          reduce using rule 53 (fragment -> RPAR .)
    STRING_END      reduce using rule 53 (fragment -> RPAR .)
    STRING_CONTINUE reduce using rule 53 (fragment -> RPAR .)
    STRING          reduce using rule 53 (fragment -> RPAR .)
    STRING_START_TRIPLE reduce using rule 53 (fragment -> RPAR .)
    WS              reduce using rule 53 (fragment -> RPAR .)
    STRING_START_SINGLE reduce using rule 53 (fragment -> RPAR .)
    NUMBER          reduce using rule 53 (fragment -> RPAR .)
    NAME            reduce using rule 53 (fragment -> RPAR .)
    LPAR            reduce using rule 53 (fragment -> RPAR .)
    RPAR            reduce using rule 53 (fragment -> RPAR .)
    OPERATOR        reduce using rule 53 (fragment -> RPAR .)
    LSQB            reduce using rule 53 (fragment -> RPAR .)
    RSQB            reduce using rule 53 (fragment -> RPAR .)
    COLON           reduce using rule 53 (fragment -> RPAR .)
    PERIOD          reduce using rule 53 (fragment -> RPAR .)
    RANGE           reduce using rule 53 (fragment -> RPAR .)
    CLASS           reduce using rule 53 (fragment -> RPAR .)
    DEF             reduce using rule 53 (fragment -> RPAR .)
    IF              reduce using rule 53 (fragment -> RPAR .)
    ELIF            reduce using rule 53 (fragment -> RPAR .)
    ELSE            reduce using rule 53 (fragment -> RPAR .)
    TRY             reduce using rule 53 (fragment -> RPAR .)
    EXCEPT          reduce using rule 53 (fragment -> RPAR .)
    FINALLY         reduce using rule 53 (fragment -> RPAR .)
    WITH            reduce using rule 53 (fragment -> RPAR .)
    WHILE           reduce using rule 53 (fragment -> RPAR .)
    FOR             reduce using rule 53 (fragment -> RPAR .)
    COMMENT         reduce using rule 53 (fragment -> RPAR .)
    ENDMARKER       reduce using rule 53 (fragment -> RPAR .)
    DEDENT          reduce using rule 53 (fragment -> RPAR .)


state 5

    (14) block_keyword -> WHILE .

    LBRACE          reduce using rule 14 (block_keyword -> WHILE .)
    RBRACE          reduce using rule 14 (block_keyword -> WHILE .)
    STRING_END      reduce using rule 14 (block_keyword -> WHILE .)
    STRING_CONTINUE reduce using rule 14 (block_keyword -> WHILE .)
    STRING          reduce using rule 14 (block_keyword -> WHILE .)
    STRING_START_TRIPLE reduce using rule 14 (block_keyword -> WHILE .)
    WS              reduce using rule 14 (block_keyword -> WHILE .)
    STRING_START_SINGLE reduce using rule 14 (block_keyword -> WHILE .)
    NUMBER          reduce using rule 14 (block_keyword -> WHILE .)
    NAME            reduce using rule 14 (block_keyword -> WHILE .)
    LPAR            reduce using rule 14 (block_keyword -> WHILE .)
    RPAR            reduce using rule 14 (block_keyword -> WHILE .)
    LSQB            reduce using rule 14 (block_keyword -> WHILE .)
    RSQB            reduce using rule 14 (block_keyword -> WHILE .)
    COLON           reduce using rule 14 (block_keyword -> WHILE .)
    OPERATOR        reduce using rule 14 (block_keyword -> WHILE .)
    COMMENT         reduce using rule 14 (block_keyword -> WHILE .)
    RANGE           reduce using rule 14 (block_keyword -> WHILE .)
    CLASS           reduce using rule 14 (block_keyword -> WHILE .)
    DEF             reduce using rule 14 (block_keyword -> WHILE .)
    IF              reduce using rule 14 (block_keyword -> WHILE .)
    ELIF            reduce using rule 14 (block_keyword -> WHILE .)
    ELSE            reduce using rule 14 (block_keyword -> WHILE .)
    TRY             reduce using rule 14 (block_keyword -> WHILE .)
    EXCEPT          reduce using rule 14 (block_keyword -> WHILE .)
    FINALLY         reduce using rule 14 (block_keyword -> WHILE .)
    WITH            reduce using rule 14 (block_keyword -> WHILE .)
    WHILE           reduce using rule 14 (block_keyword -> WHILE .)
    FOR             reduce using rule 14 (block_keyword -> WHILE .)
    NEWLINE         reduce using rule 14 (block_keyword -> WHILE .)
    PERIOD          reduce using rule 14 (block_keyword -> WHILE .)
    ENDMARKER       reduce using rule 14 (block_keyword -> WHILE .)
    DEDENT          reduce using rule 14 (block_keyword -> WHILE .)


state 6

    (48) fragment -> WS .

    NEWLINE         reduce using rule 48 (fragment -> WS .)
    LBRACE          reduce using rule 48 (fragment -> WS .)
    RBRACE          reduce using rule 48 (fragment -> WS .)
    STRING_END      reduce using rule 48 (fragment -> WS .)
    STRING_CONTINUE reduce using rule 48 (fragment -> WS .)
    STRING          reduce using rule 48 (fragment -> WS .)
    STRING_START_TRIPLE reduce using rule 48 (fragment -> WS .)
    WS              reduce using rule 48 (fragment -> WS .)
    STRING_START_SINGLE reduce using rule 48 (fragment -> WS .)
    NUMBER          reduce using rule 48 (fragment -> WS .)
    NAME            reduce using rule 48 (fragment -> WS .)
    LPAR            reduce using rule 48 (fragment -> WS .)
    RPAR            reduce using rule 48 (fragment -> WS .)
    OPERATOR        reduce using rule 48 (fragment -> WS .)
    LSQB            reduce using rule 48 (fragment -> WS .)
    RSQB            reduce using rule 48 (fragment -> WS .)
    COLON           reduce using rule 48 (fragment -> WS .)
    PERIOD          reduce using rule 48 (fragment -> WS .)
    RANGE           reduce using rule 48 (fragment -> WS .)
    CLASS           reduce using rule 48 (fragment -> WS .)
    DEF             reduce using rule 48 (fragment -> WS .)
    IF              reduce using rule 48 (fragment -> WS .)
    ELIF            reduce using rule 48 (fragment -> WS .)
    ELSE            reduce using rule 48 (fragment -> WS .)
    TRY             reduce using rule 48 (fragment -> WS .)
    EXCEPT          reduce using rule 48 (fragment -> WS .)
    FINALLY         reduce using rule 48 (fragment -> WS .)
    WITH            reduce using rule 48 (fragment -> WS .)
    WHILE           reduce using rule 48 (fragment -> WS .)
    FOR             reduce using rule 48 (fragment -> WS .)
    COMMENT         reduce using rule 48 (fragment -> WS .)
    ENDMARKER       reduce using rule 48 (fragment -> WS .)
    DEDENT          reduce using rule 48 (fragment -> WS .)


state 7

    (13) block_keyword -> WITH .

    LBRACE          reduce using rule 13 (block_keyword -> WITH .)
    RBRACE          reduce using rule 13 (block_keyword -> WITH .)
    STRING_END      reduce using rule 13 (block_keyword -> WITH .)
    STRING_CONTINUE reduce using rule 13 (block_keyword -> WITH .)
    STRING          reduce using rule 13 (block_keyword -> WITH .)
    STRING_START_TRIPLE reduce using rule 13 (block_keyword -> WITH .)
    WS              reduce using rule 13 (block_keyword -> WITH .)
    STRING_START_SINGLE reduce using rule 13 (block_keyword -> WITH .)
    NUMBER          reduce using rule 13 (block_keyword -> WITH .)
    NAME            reduce using rule 13 (block_keyword -> WITH .)
    LPAR            reduce using rule 13 (block_keyword -> WITH .)
    RPAR            reduce using rule 13 (block_keyword -> WITH .)
    LSQB            reduce using rule 13 (block_keyword -> WITH .)
    RSQB            reduce using rule 13 (block_keyword -> WITH .)
    COLON           reduce using rule 13 (block_keyword -> WITH .)
    OPERATOR        reduce using rule 13 (block_keyword -> WITH .)
    COMMENT         reduce using rule 13 (block_keyword -> WITH .)
    RANGE           reduce using rule 13 (block_keyword -> WITH .)
    CLASS           reduce using rule 13 (block_keyword -> WITH .)
    DEF             reduce using rule 13 (block_keyword -> WITH .)
    IF              reduce using rule 13 (block_keyword -> WITH .)
    ELIF            reduce using rule 13 (block_keyword -> WITH .)
    ELSE            reduce using rule 13 (block_keyword -> WITH .)
    TRY             reduce using rule 13 (block_keyword -> WITH .)
    EXCEPT          reduce using rule 13 (block_keyword -> WITH .)
    FINALLY         reduce using rule 13 (block_keyword -> WITH .)
    WITH            reduce using rule 13 (block_keyword -> WITH .)
    WHILE           reduce using rule 13 (block_keyword -> WITH .)
    FOR             reduce using rule 13 (block_keyword -> WITH .)
    NEWLINE         reduce using rule 13 (block_keyword -> WITH .)
    PERIOD          reduce using rule 13 (block_keyword -> WITH .)
    ENDMARKER       reduce using rule 13 (block_keyword -> WITH .)
    DEDENT          reduce using rule 13 (block_keyword -> WITH .)


state 8

    (6) block_keyword -> DEF .

    LBRACE          reduce using rule 6 (block_keyword -> DEF .)
    RBRACE          reduce using rule 6 (block_keyword -> DEF .)
    STRING_END      reduce using rule 6 (block_keyword -> DEF .)
    STRING_CONTINUE reduce using rule 6 (block_keyword -> DEF .)
    STRING          reduce using rule 6 (block_keyword -> DEF .)
    STRING_START_TRIPLE reduce using rule 6 (block_keyword -> DEF .)
    WS              reduce using rule 6 (block_keyword -> DEF .)
    STRING_START_SINGLE reduce using rule 6 (block_keyword -> DEF .)
    NUMBER          reduce using rule 6 (block_keyword -> DEF .)
    NAME            reduce using rule 6 (block_keyword -> DEF .)
    LPAR            reduce using rule 6 (block_keyword -> DEF .)
    RPAR            reduce using rule 6 (block_keyword -> DEF .)
    LSQB            reduce using rule 6 (block_keyword -> DEF .)
    RSQB            reduce using rule 6 (block_keyword -> DEF .)
    COLON           reduce using rule 6 (block_keyword -> DEF .)
    OPERATOR        reduce using rule 6 (block_keyword -> DEF .)
    COMMENT         reduce using rule 6 (block_keyword -> DEF .)
    RANGE           reduce using rule 6 (block_keyword -> DEF .)
    CLASS           reduce using rule 6 (block_keyword -> DEF .)
    DEF             reduce using rule 6 (block_keyword -> DEF .)
    IF              reduce using rule 6 (block_keyword -> DEF .)
    ELIF            reduce using rule 6 (block_keyword -> DEF .)
    ELSE            reduce using rule 6 (block_keyword -> DEF .)
    TRY             reduce using rule 6 (block_keyword -> DEF .)
    EXCEPT          reduce using rule 6 (block_keyword -> DEF .)
    FINALLY         reduce using rule 6 (block_keyword -> DEF .)
    WITH            reduce using rule 6 (block_keyword -> DEF .)
    WHILE           reduce using rule 6 (block_keyword -> DEF .)
    FOR             reduce using rule 6 (block_keyword -> DEF .)
    NEWLINE         reduce using rule 6 (block_keyword -> DEF .)
    PERIOD          reduce using rule 6 (block_keyword -> DEF .)
    ENDMARKER       reduce using rule 6 (block_keyword -> DEF .)
    DEDENT          reduce using rule 6 (block_keyword -> DEF .)


state 9

    (46) fragment -> STRING .

    NEWLINE         reduce using rule 46 (fragment -> STRING .)
    LBRACE          reduce using rule 46 (fragment -> STRING .)
    RBRACE          reduce using rule 46 (fragment -> STRING .)
    STRING_END      reduce using rule 46 (fragment -> STRING .)
    STRING_CONTINUE reduce using rule 46 (fragment -> STRING .)
    STRING          reduce using rule 46 (fragment -> STRING .)
    STRING_START_TRIPLE reduce using rule 46 (fragment -> STRING .)
    WS              reduce using rule 46 (fragment -> STRING .)
    STRING_START_SINGLE reduce using rule 46 (fragment -> STRING .)
    NUMBER          reduce using rule 46 (fragment -> STRING .)
    NAME            reduce using rule 46 (fragment -> STRING .)
    LPAR            reduce using rule 46 (fragment -> STRING .)
    RPAR            reduce using rule 46 (fragment -> STRING .)
    OPERATOR        reduce using rule 46 (fragment -> STRING .)
    LSQB            reduce using rule 46 (fragment -> STRING .)
    RSQB            reduce using rule 46 (fragment -> STRING .)
    COLON           reduce using rule 46 (fragment -> STRING .)
    PERIOD          reduce using rule 46 (fragment -> STRING .)
    RANGE           reduce using rule 46 (fragment -> STRING .)
    CLASS           reduce using rule 46 (fragment -> STRING .)
    DEF             reduce using rule 46 (fragment -> STRING .)
    IF              reduce using rule 46 (fragment -> STRING .)
    ELIF            reduce using rule 46 (fragment -> STRING .)
    ELSE            reduce using rule 46 (fragment -> STRING .)
    TRY             reduce using rule 46 (fragment -> STRING .)
    EXCEPT          reduce using rule 46 (fragment -> STRING .)
    FINALLY         reduce using rule 46 (fragment -> STRING .)
    WITH            reduce using rule 46 (fragment -> STRING .)
    WHILE           reduce using rule 46 (fragment -> STRING .)
    FOR             reduce using rule 46 (fragment -> STRING .)
    COMMENT         reduce using rule 46 (fragment -> STRING .)
    ENDMARKER       reduce using rule 46 (fragment -> STRING .)
    DEDENT          reduce using rule 46 (fragment -> STRING .)


state 10

    (58) fragment -> COMMENT .

    NEWLINE         reduce using rule 58 (fragment -> COMMENT .)
    LBRACE          reduce using rule 58 (fragment -> COMMENT .)
    RBRACE          reduce using rule 58 (fragment -> COMMENT .)
    STRING_END      reduce using rule 58 (fragment -> COMMENT .)
    STRING_CONTINUE reduce using rule 58 (fragment -> COMMENT .)
    STRING          reduce using rule 58 (fragment -> COMMENT .)
    STRING_START_TRIPLE reduce using rule 58 (fragment -> COMMENT .)
    WS              reduce using rule 58 (fragment -> COMMENT .)
    STRING_START_SINGLE reduce using rule 58 (fragment -> COMMENT .)
    NUMBER          reduce using rule 58 (fragment -> COMMENT .)
    NAME            reduce using rule 58 (fragment -> COMMENT .)
    LPAR            reduce using rule 58 (fragment -> COMMENT .)
    RPAR            reduce using rule 58 (fragment -> COMMENT .)
    OPERATOR        reduce using rule 58 (fragment -> COMMENT .)
    LSQB            reduce using rule 58 (fragment -> COMMENT .)
    RSQB            reduce using rule 58 (fragment -> COMMENT .)
    COLON           reduce using rule 58 (fragment -> COMMENT .)
    PERIOD          reduce using rule 58 (fragment -> COMMENT .)
    RANGE           reduce using rule 58 (fragment -> COMMENT .)
    CLASS           reduce using rule 58 (fragment -> COMMENT .)
    DEF             reduce using rule 58 (fragment -> COMMENT .)
    IF              reduce using rule 58 (fragment -> COMMENT .)
    ELIF            reduce using rule 58 (fragment -> COMMENT .)
    ELSE            reduce using rule 58 (fragment -> COMMENT .)
    TRY             reduce using rule 58 (fragment -> COMMENT .)
    EXCEPT          reduce using rule 58 (fragment -> COMMENT .)
    FINALLY         reduce using rule 58 (fragment -> COMMENT .)
    WITH            reduce using rule 58 (fragment -> COMMENT .)
    WHILE           reduce using rule 58 (fragment -> COMMENT .)
    FOR             reduce using rule 58 (fragment -> COMMENT .)
    COMMENT         reduce using rule 58 (fragment -> COMMENT .)
    ENDMARKER       reduce using rule 58 (fragment -> COMMENT .)
    DEDENT          reduce using rule 58 (fragment -> COMMENT .)


state 11

    (20) stmt -> NEWLINE .

    DEDENT          reduce using rule 20 (stmt -> NEWLINE .)
    NEWLINE         reduce using rule 20 (stmt -> NEWLINE .)
    LBRACE          reduce using rule 20 (stmt -> NEWLINE .)
    RBRACE          reduce using rule 20 (stmt -> NEWLINE .)
    STRING_END      reduce using rule 20 (stmt -> NEWLINE .)
    STRING_CONTINUE reduce using rule 20 (stmt -> NEWLINE .)
    STRING          reduce using rule 20 (stmt -> NEWLINE .)
    STRING_START_TRIPLE reduce using rule 20 (stmt -> NEWLINE .)
    WS              reduce using rule 20 (stmt -> NEWLINE .)
    STRING_START_SINGLE reduce using rule 20 (stmt -> NEWLINE .)
    NUMBER          reduce using rule 20 (stmt -> NEWLINE .)
    NAME            reduce using rule 20 (stmt -> NEWLINE .)
    LPAR            reduce using rule 20 (stmt -> NEWLINE .)
    RPAR            reduce using rule 20 (stmt -> NEWLINE .)
    LSQB            reduce using rule 20 (stmt -> NEWLINE .)
    RSQB            reduce using rule 20 (stmt -> NEWLINE .)
    COLON           reduce using rule 20 (stmt -> NEWLINE .)
    OPERATOR        reduce using rule 20 (stmt -> NEWLINE .)
    COMMENT         reduce using rule 20 (stmt -> NEWLINE .)
    RANGE           reduce using rule 20 (stmt -> NEWLINE .)
    CLASS           reduce using rule 20 (stmt -> NEWLINE .)
    DEF             reduce using rule 20 (stmt -> NEWLINE .)
    IF              reduce using rule 20 (stmt -> NEWLINE .)
    ELIF            reduce using rule 20 (stmt -> NEWLINE .)
    ELSE            reduce using rule 20 (stmt -> NEWLINE .)
    TRY             reduce using rule 20 (stmt -> NEWLINE .)
    EXCEPT          reduce using rule 20 (stmt -> NEWLINE .)
    FINALLY         reduce using rule 20 (stmt -> NEWLINE .)
    WITH            reduce using rule 20 (stmt -> NEWLINE .)
    WHILE           reduce using rule 20 (stmt -> NEWLINE .)
    FOR             reduce using rule 20 (stmt -> NEWLINE .)
    ENDMARKER       reduce using rule 20 (stmt -> NEWLINE .)


state 12

    (11) block_keyword -> EXCEPT .

    LBRACE          reduce using rule 11 (block_keyword -> EXCEPT .)
    RBRACE          reduce using rule 11 (block_keyword -> EXCEPT .)
    STRING_END      reduce using rule 11 (block_keyword -> EXCEPT .)
    STRING_CONTINUE reduce using rule 11 (block_keyword -> EXCEPT .)
    STRING          reduce using rule 11 (block_keyword -> EXCEPT .)
    STRING_START_TRIPLE reduce using rule 11 (block_keyword -> EXCEPT .)
    WS              reduce using rule 11 (block_keyword -> EXCEPT .)
    STRING_START_SINGLE reduce using rule 11 (block_keyword -> EXCEPT .)
    NUMBER          reduce using rule 11 (block_keyword -> EXCEPT .)
    NAME            reduce using rule 11 (block_keyword -> EXCEPT .)
    LPAR            reduce using rule 11 (block_keyword -> EXCEPT .)
    RPAR            reduce using rule 11 (block_keyword -> EXCEPT .)
    LSQB            reduce using rule 11 (block_keyword -> EXCEPT .)
    RSQB            reduce using rule 11 (block_keyword -> EXCEPT .)
    COLON           reduce using rule 11 (block_keyword -> EXCEPT .)
    OPERATOR        reduce using rule 11 (block_keyword -> EXCEPT .)
    COMMENT         reduce using rule 11 (block_keyword -> EXCEPT .)
    RANGE           reduce using rule 11 (block_keyword -> EXCEPT .)
    CLASS           reduce using rule 11 (block_keyword -> EXCEPT .)
    DEF             reduce using rule 11 (block_keyword -> EXCEPT .)
    IF              reduce using rule 11 (block_keyword -> EXCEPT .)
    ELIF            reduce using rule 11 (block_keyword -> EXCEPT .)
    ELSE            reduce using rule 11 (block_keyword -> EXCEPT .)
    TRY             reduce using rule 11 (block_keyword -> EXCEPT .)
    EXCEPT          reduce using rule 11 (block_keyword -> EXCEPT .)
    FINALLY         reduce using rule 11 (block_keyword -> EXCEPT .)
    WITH            reduce using rule 11 (block_keyword -> EXCEPT .)
    WHILE           reduce using rule 11 (block_keyword -> EXCEPT .)
    FOR             reduce using rule 11 (block_keyword -> EXCEPT .)
    NEWLINE         reduce using rule 11 (block_keyword -> EXCEPT .)
    PERIOD          reduce using rule 11 (block_keyword -> EXCEPT .)
    ENDMARKER       reduce using rule 11 (block_keyword -> EXCEPT .)
    DEDENT          reduce using rule 11 (block_keyword -> EXCEPT .)


state 13

    (8) block_keyword -> ELIF .

    LBRACE          reduce using rule 8 (block_keyword -> ELIF .)
    RBRACE          reduce using rule 8 (block_keyword -> ELIF .)
    STRING_END      reduce using rule 8 (block_keyword -> ELIF .)
    STRING_CONTINUE reduce using rule 8 (block_keyword -> ELIF .)
    STRING          reduce using rule 8 (block_keyword -> ELIF .)
    STRING_START_TRIPLE reduce using rule 8 (block_keyword -> ELIF .)
    WS              reduce using rule 8 (block_keyword -> ELIF .)
    STRING_START_SINGLE reduce using rule 8 (block_keyword -> ELIF .)
    NUMBER          reduce using rule 8 (block_keyword -> ELIF .)
    NAME            reduce using rule 8 (block_keyword -> ELIF .)
    LPAR            reduce using rule 8 (block_keyword -> ELIF .)
    RPAR            reduce using rule 8 (block_keyword -> ELIF .)
    LSQB            reduce using rule 8 (block_keyword -> ELIF .)
    RSQB            reduce using rule 8 (block_keyword -> ELIF .)
    COLON           reduce using rule 8 (block_keyword -> ELIF .)
    OPERATOR        reduce using rule 8 (block_keyword -> ELIF .)
    COMMENT         reduce using rule 8 (block_keyword -> ELIF .)
    RANGE           reduce using rule 8 (block_keyword -> ELIF .)
    CLASS           reduce using rule 8 (block_keyword -> ELIF .)
    DEF             reduce using rule 8 (block_keyword -> ELIF .)
    IF              reduce using rule 8 (block_keyword -> ELIF .)
    ELIF            reduce using rule 8 (block_keyword -> ELIF .)
    ELSE            reduce using rule 8 (block_keyword -> ELIF .)
    TRY             reduce using rule 8 (block_keyword -> ELIF .)
    EXCEPT          reduce using rule 8 (block_keyword -> ELIF .)
    FINALLY         reduce using rule 8 (block_keyword -> ELIF .)
    WITH            reduce using rule 8 (block_keyword -> ELIF .)
    WHILE           reduce using rule 8 (block_keyword -> ELIF .)
    FOR             reduce using rule 8 (block_keyword -> ELIF .)
    NEWLINE         reduce using rule 8 (block_keyword -> ELIF .)
    PERIOD          reduce using rule 8 (block_keyword -> ELIF .)
    ENDMARKER       reduce using rule 8 (block_keyword -> ELIF .)
    DEDENT          reduce using rule 8 (block_keyword -> ELIF .)


state 14

    (56) fragment -> COLON .

    NEWLINE         reduce using rule 56 (fragment -> COLON .)
    LBRACE          reduce using rule 56 (fragment -> COLON .)
    RBRACE          reduce using rule 56 (fragment -> COLON .)
    STRING_END      reduce using rule 56 (fragment -> COLON .)
    STRING_CONTINUE reduce using rule 56 (fragment -> COLON .)
    STRING          reduce using rule 56 (fragment -> COLON .)
    STRING_START_TRIPLE reduce using rule 56 (fragment -> COLON .)
    WS              reduce using rule 56 (fragment -> COLON .)
    STRING_START_SINGLE reduce using rule 56 (fragment -> COLON .)
    NUMBER          reduce using rule 56 (fragment -> COLON .)
    NAME            reduce using rule 56 (fragment -> COLON .)
    LPAR            reduce using rule 56 (fragment -> COLON .)
    RPAR            reduce using rule 56 (fragment -> COLON .)
    OPERATOR        reduce using rule 56 (fragment -> COLON .)
    LSQB            reduce using rule 56 (fragment -> COLON .)
    RSQB            reduce using rule 56 (fragment -> COLON .)
    COLON           reduce using rule 56 (fragment -> COLON .)
    PERIOD          reduce using rule 56 (fragment -> COLON .)
    RANGE           reduce using rule 56 (fragment -> COLON .)
    CLASS           reduce using rule 56 (fragment -> COLON .)
    DEF             reduce using rule 56 (fragment -> COLON .)
    IF              reduce using rule 56 (fragment -> COLON .)
    ELIF            reduce using rule 56 (fragment -> COLON .)
    ELSE            reduce using rule 56 (fragment -> COLON .)
    TRY             reduce using rule 56 (fragment -> COLON .)
    EXCEPT          reduce using rule 56 (fragment -> COLON .)
    FINALLY         reduce using rule 56 (fragment -> COLON .)
    WITH            reduce using rule 56 (fragment -> COLON .)
    WHILE           reduce using rule 56 (fragment -> COLON .)
    FOR             reduce using rule 56 (fragment -> COLON .)
    COMMENT         reduce using rule 56 (fragment -> COLON .)
    ENDMARKER       reduce using rule 56 (fragment -> COLON .)
    DEDENT          reduce using rule 56 (fragment -> COLON .)


state 15

    (1) file_input -> suite . ENDMARKER
    (17) suite -> suite . stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment
    (20) stmt -> . NEWLINE
    (21) stmt -> . block
    (22) fragment -> . fragment LBRACE
    (23) fragment -> . fragment RBRACE
    (24) fragment -> . fragment STRING_END
    (25) fragment -> . fragment STRING_CONTINUE
    (26) fragment -> . fragment STRING
    (27) fragment -> . fragment STRING_START_TRIPLE
    (28) fragment -> . fragment WS
    (29) fragment -> . fragment STRING_START_SINGLE
    (30) fragment -> . fragment NUMBER
    (31) fragment -> . fragment NAME
    (32) fragment -> . fragment LPAR
    (33) fragment -> . fragment RPAR
    (34) fragment -> . fragment OPERATOR
    (35) fragment -> . fragment LSQB
    (36) fragment -> . fragment RSQB
    (37) fragment -> . fragment COLON
    (38) fragment -> . fragment block_keyword
    (39) fragment -> . fragment PERIOD
    (40) fragment -> . fragment RANGE
    (41) fragment -> . block_keyword
    (42) fragment -> . LBRACE
    (43) fragment -> . RBRACE
    (44) fragment -> . STRING_END
    (45) fragment -> . STRING_CONTINUE
    (46) fragment -> . STRING
    (47) fragment -> . STRING_START_TRIPLE
    (48) fragment -> . WS
    (49) fragment -> . STRING_START_SINGLE
    (50) fragment -> . NUMBER
    (51) fragment -> . NAME
    (52) fragment -> . LPAR
    (53) fragment -> . RPAR
    (54) fragment -> . LSQB
    (55) fragment -> . RSQB
    (56) fragment -> . COLON
    (57) fragment -> . OPERATOR
    (58) fragment -> . COMMENT
    (59) fragment -> . RANGE
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

    ENDMARKER       shift and go to state 37
    NEWLINE         shift and go to state 11
    LBRACE          shift and go to state 31
    RBRACE          shift and go to state 19
    STRING_END      shift and go to state 16
    STRING_CONTINUE shift and go to state 35
    STRING          shift and go to state 9
    STRING_START_TRIPLE shift and go to state 2
    WS              shift and go to state 6
    STRING_START_SINGLE shift and go to state 26
    NUMBER          shift and go to state 3
    NAME            shift and go to state 32
    LPAR            shift and go to state 1
    RPAR            shift and go to state 4
    LSQB            shift and go to state 29
    RSQB            shift and go to state 17
    COLON           shift and go to state 14
    OPERATOR        shift and go to state 28
    COMMENT         shift and go to state 10
    RANGE           shift and go to state 25
    CLASS           shift and go to state 18
    DEF             shift and go to state 8
    IF              shift and go to state 30
    ELIF            shift and go to state 13
    ELSE            shift and go to state 23
    TRY             shift and go to state 24
    EXCEPT          shift and go to state 12
    FINALLY         shift and go to state 34
    WITH            shift and go to state 7
    WHILE           shift and go to state 5
    FOR             shift and go to state 20

    fragment                       shift and go to state 21
    block_keyword                  shift and go to state 27
    block                          shift and go to state 36
    stmt                           shift and go to state 38

state 16

    (44) fragment -> STRING_END .

    NEWLINE         reduce using rule 44 (fragment -> STRING_END .)
    LBRACE          reduce using rule 44 (fragment -> STRING_END .)
    RBRACE          reduce using rule 44 (fragment -> STRING_END .)
    STRING_END      reduce using rule 44 (fragment -> STRING_END .)
    STRING_CONTINUE reduce using rule 44 (fragment -> STRING_END .)
    STRING          reduce using rule 44 (fragment -> STRING_END .)
    STRING_START_TRIPLE reduce using rule 44 (fragment -> STRING_END .)
    WS              reduce using rule 44 (fragment -> STRING_END .)
    STRING_START_SINGLE reduce using rule 44 (fragment -> STRING_END .)
    NUMBER          reduce using rule 44 (fragment -> STRING_END .)
    NAME            reduce using rule 44 (fragment -> STRING_END .)
    LPAR            reduce using rule 44 (fragment -> STRING_END .)
    RPAR            reduce using rule 44 (fragment -> STRING_END .)
    OPERATOR        reduce using rule 44 (fragment -> STRING_END .)
    LSQB            reduce using rule 44 (fragment -> STRING_END .)
    RSQB            reduce using rule 44 (fragment -> STRING_END .)
    COLON           reduce using rule 44 (fragment -> STRING_END .)
    PERIOD          reduce using rule 44 (fragment -> STRING_END .)
    RANGE           reduce using rule 44 (fragment -> STRING_END .)
    CLASS           reduce using rule 44 (fragment -> STRING_END .)
    DEF             reduce using rule 44 (fragment -> STRING_END .)
    IF              reduce using rule 44 (fragment -> STRING_END .)
    ELIF            reduce using rule 44 (fragment -> STRING_END .)
    ELSE            reduce using rule 44 (fragment -> STRING_END .)
    TRY             reduce using rule 44 (fragment -> STRING_END .)
    EXCEPT          reduce using rule 44 (fragment -> STRING_END .)
    FINALLY         reduce using rule 44 (fragment -> STRING_END .)
    WITH            reduce using rule 44 (fragment -> STRING_END .)
    WHILE           reduce using rule 44 (fragment -> STRING_END .)
    FOR             reduce using rule 44 (fragment -> STRING_END .)
    COMMENT         reduce using rule 44 (fragment -> STRING_END .)
    ENDMARKER       reduce using rule 44 (fragment -> STRING_END .)
    DEDENT          reduce using rule 44 (fragment -> STRING_END .)


state 17

    (55) fragment -> RSQB .

    NEWLINE         reduce using rule 55 (fragment -> RSQB .)
    LBRACE          reduce using rule 55 (fragment -> RSQB .)
    RBRACE          reduce using rule 55 (fragment -> RSQB .)
    STRING_END      reduce using rule 55 (fragment -> RSQB .)
    STRING_CONTINUE reduce using rule 55 (fragment -> RSQB .)
    STRING          reduce using rule 55 (fragment -> RSQB .)
    STRING_START_TRIPLE reduce using rule 55 (fragment -> RSQB .)
    WS              reduce using rule 55 (fragment -> RSQB .)
    STRING_START_SINGLE reduce using rule 55 (fragment -> RSQB .)
    NUMBER          reduce using rule 55 (fragment -> RSQB .)
    NAME            reduce using rule 55 (fragment -> RSQB .)
    LPAR            reduce using rule 55 (fragment -> RSQB .)
    RPAR            reduce using rule 55 (fragment -> RSQB .)
    OPERATOR        reduce using rule 55 (fragment -> RSQB .)
    LSQB            reduce using rule 55 (fragment -> RSQB .)
    RSQB            reduce using rule 55 (fragment -> RSQB .)
    COLON           reduce using rule 55 (fragment -> RSQB .)
    PERIOD          reduce using rule 55 (fragment -> RSQB .)
    RANGE           reduce using rule 55 (fragment -> RSQB .)
    CLASS           reduce using rule 55 (fragment -> RSQB .)
    DEF             reduce using rule 55 (fragment -> RSQB .)
    IF              reduce using rule 55 (fragment -> RSQB .)
    ELIF            reduce using rule 55 (fragment -> RSQB .)
    ELSE            reduce using rule 55 (fragment -> RSQB .)
    TRY             reduce using rule 55 (fragment -> RSQB .)
    EXCEPT          reduce using rule 55 (fragment -> RSQB .)
    FINALLY         reduce using rule 55 (fragment -> RSQB .)
    WITH            reduce using rule 55 (fragment -> RSQB .)
    WHILE           reduce using rule 55 (fragment -> RSQB .)
    FOR             reduce using rule 55 (fragment -> RSQB .)
    COMMENT         reduce using rule 55 (fragment -> RSQB .)
    ENDMARKER       reduce using rule 55 (fragment -> RSQB .)
    DEDENT          reduce using rule 55 (fragment -> RSQB .)


state 18

    (5) block_keyword -> CLASS .

    LBRACE          reduce using rule 5 (block_keyword -> CLASS .)
    RBRACE          reduce using rule 5 (block_keyword -> CLASS .)
    STRING_END      reduce using rule 5 (block_keyword -> CLASS .)
    STRING_CONTINUE reduce using rule 5 (block_keyword -> CLASS .)
    STRING          reduce using rule 5 (block_keyword -> CLASS .)
    STRING_START_TRIPLE reduce using rule 5 (block_keyword -> CLASS .)
    WS              reduce using rule 5 (block_keyword -> CLASS .)
    STRING_START_SINGLE reduce using rule 5 (block_keyword -> CLASS .)
    NUMBER          reduce using rule 5 (block_keyword -> CLASS .)
    NAME            reduce using rule 5 (block_keyword -> CLASS .)
    LPAR            reduce using rule 5 (block_keyword -> CLASS .)
    RPAR            reduce using rule 5 (block_keyword -> CLASS .)
    LSQB            reduce using rule 5 (block_keyword -> CLASS .)
    RSQB            reduce using rule 5 (block_keyword -> CLASS .)
    COLON           reduce using rule 5 (block_keyword -> CLASS .)
    OPERATOR        reduce using rule 5 (block_keyword -> CLASS .)
    COMMENT         reduce using rule 5 (block_keyword -> CLASS .)
    RANGE           reduce using rule 5 (block_keyword -> CLASS .)
    CLASS           reduce using rule 5 (block_keyword -> CLASS .)
    DEF             reduce using rule 5 (block_keyword -> CLASS .)
    IF              reduce using rule 5 (block_keyword -> CLASS .)
    ELIF            reduce using rule 5 (block_keyword -> CLASS .)
    ELSE            reduce using rule 5 (block_keyword -> CLASS .)
    TRY             reduce using rule 5 (block_keyword -> CLASS .)
    EXCEPT          reduce using rule 5 (block_keyword -> CLASS .)
    FINALLY         reduce using rule 5 (block_keyword -> CLASS .)
    WITH            reduce using rule 5 (block_keyword -> CLASS .)
    WHILE           reduce using rule 5 (block_keyword -> CLASS .)
    FOR             reduce using rule 5 (block_keyword -> CLASS .)
    NEWLINE         reduce using rule 5 (block_keyword -> CLASS .)
    PERIOD          reduce using rule 5 (block_keyword -> CLASS .)
    ENDMARKER       reduce using rule 5 (block_keyword -> CLASS .)
    DEDENT          reduce using rule 5 (block_keyword -> CLASS .)


state 19

    (43) fragment -> RBRACE .

    NEWLINE         reduce using rule 43 (fragment -> RBRACE .)
    LBRACE          reduce using rule 43 (fragment -> RBRACE .)
    RBRACE          reduce using rule 43 (fragment -> RBRACE .)
    STRING_END      reduce using rule 43 (fragment -> RBRACE .)
    STRING_CONTINUE reduce using rule 43 (fragment -> RBRACE .)
    STRING          reduce using rule 43 (fragment -> RBRACE .)
    STRING_START_TRIPLE reduce using rule 43 (fragment -> RBRACE .)
    WS              reduce using rule 43 (fragment -> RBRACE .)
    STRING_START_SINGLE reduce using rule 43 (fragment -> RBRACE .)
    NUMBER          reduce using rule 43 (fragment -> RBRACE .)
    NAME            reduce using rule 43 (fragment -> RBRACE .)
    LPAR            reduce using rule 43 (fragment -> RBRACE .)
    RPAR            reduce using rule 43 (fragment -> RBRACE .)
    OPERATOR        reduce using rule 43 (fragment -> RBRACE .)
    LSQB            reduce using rule 43 (fragment -> RBRACE .)
    RSQB            reduce using rule 43 (fragment -> RBRACE .)
    COLON           reduce using rule 43 (fragment -> RBRACE .)
    PERIOD          reduce using rule 43 (fragment -> RBRACE .)
    RANGE           reduce using rule 43 (fragment -> RBRACE .)
    CLASS           reduce using rule 43 (fragment -> RBRACE .)
    DEF             reduce using rule 43 (fragment -> RBRACE .)
    IF              reduce using rule 43 (fragment -> RBRACE .)
    ELIF            reduce using rule 43 (fragment -> RBRACE .)
    ELSE            reduce using rule 43 (fragment -> RBRACE .)
    TRY             reduce using rule 43 (fragment -> RBRACE .)
    EXCEPT          reduce using rule 43 (fragment -> RBRACE .)
    FINALLY         reduce using rule 43 (fragment -> RBRACE .)
    WITH            reduce using rule 43 (fragment -> RBRACE .)
    WHILE           reduce using rule 43 (fragment -> RBRACE .)
    FOR             reduce using rule 43 (fragment -> RBRACE .)
    COMMENT         reduce using rule 43 (fragment -> RBRACE .)
    ENDMARKER       reduce using rule 43 (fragment -> RBRACE .)
    DEDENT          reduce using rule 43 (fragment -> RBRACE .)


state 20

    (15) block_keyword -> FOR .

    LBRACE          reduce using rule 15 (block_keyword -> FOR .)
    RBRACE          reduce using rule 15 (block_keyword -> FOR .)
    STRING_END      reduce using rule 15 (block_keyword -> FOR .)
    STRING_CONTINUE reduce using rule 15 (block_keyword -> FOR .)
    STRING          reduce using rule 15 (block_keyword -> FOR .)
    STRING_START_TRIPLE reduce using rule 15 (block_keyword -> FOR .)
    WS              reduce using rule 15 (block_keyword -> FOR .)
    STRING_START_SINGLE reduce using rule 15 (block_keyword -> FOR .)
    NUMBER          reduce using rule 15 (block_keyword -> FOR .)
    NAME            reduce using rule 15 (block_keyword -> FOR .)
    LPAR            reduce using rule 15 (block_keyword -> FOR .)
    RPAR            reduce using rule 15 (block_keyword -> FOR .)
    LSQB            reduce using rule 15 (block_keyword -> FOR .)
    RSQB            reduce using rule 15 (block_keyword -> FOR .)
    COLON           reduce using rule 15 (block_keyword -> FOR .)
    OPERATOR        reduce using rule 15 (block_keyword -> FOR .)
    COMMENT         reduce using rule 15 (block_keyword -> FOR .)
    RANGE           reduce using rule 15 (block_keyword -> FOR .)
    CLASS           reduce using rule 15 (block_keyword -> FOR .)
    DEF             reduce using rule 15 (block_keyword -> FOR .)
    IF              reduce using rule 15 (block_keyword -> FOR .)
    ELIF            reduce using rule 15 (block_keyword -> FOR .)
    ELSE            reduce using rule 15 (block_keyword -> FOR .)
    TRY             reduce using rule 15 (block_keyword -> FOR .)
    EXCEPT          reduce using rule 15 (block_keyword -> FOR .)
    FINALLY         reduce using rule 15 (block_keyword -> FOR .)
    WITH            reduce using rule 15 (block_keyword -> FOR .)
    WHILE           reduce using rule 15 (block_keyword -> FOR .)
    FOR             reduce using rule 15 (block_keyword -> FOR .)
    NEWLINE         reduce using rule 15 (block_keyword -> FOR .)
    PERIOD          reduce using rule 15 (block_keyword -> FOR .)
    ENDMARKER       reduce using rule 15 (block_keyword -> FOR .)
    DEDENT          reduce using rule 15 (block_keyword -> FOR .)


state 21

    (18) stmt -> fragment . NEWLINE
    (19) stmt -> fragment .
    (22) fragment -> fragment . LBRACE
    (23) fragment -> fragment . RBRACE
    (24) fragment -> fragment . STRING_END
    (25) fragment -> fragment . STRING_CONTINUE
    (26) fragment -> fragment . STRING
    (27) fragment -> fragment . STRING_START_TRIPLE
    (28) fragment -> fragment . WS
    (29) fragment -> fragment . STRING_START_SINGLE
    (30) fragment -> fragment . NUMBER
    (31) fragment -> fragment . NAME
    (32) fragment -> fragment . LPAR
    (33) fragment -> fragment . RPAR
    (34) fragment -> fragment . OPERATOR
    (35) fragment -> fragment . LSQB
    (36) fragment -> fragment . RSQB
    (37) fragment -> fragment . COLON
    (38) fragment -> fragment . block_keyword
    (39) fragment -> fragment . PERIOD
    (40) fragment -> fragment . RANGE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for STRING_END resolved as shift
  ! shift/reduce conflict for STRING_CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for STRING_START_TRIPLE resolved as shift
  ! shift/reduce conflict for WS resolved as shift
  ! shift/reduce conflict for STRING_START_SINGLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for RPAR resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for LSQB resolved as shift
  ! shift/reduce conflict for RSQB resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for EXCEPT resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    NEWLINE         shift and go to state 45
    DEDENT          reduce using rule 19 (stmt -> fragment .)
    COMMENT         reduce using rule 19 (stmt -> fragment .)
    ENDMARKER       reduce using rule 19 (stmt -> fragment .)
    LBRACE          shift and go to state 56
    RBRACE          shift and go to state 49
    STRING_END      shift and go to state 47
    STRING_CONTINUE shift and go to state 58
    STRING          shift and go to state 44
    STRING_START_TRIPLE shift and go to state 40
    WS              shift and go to state 43
    STRING_START_SINGLE shift and go to state 51
    NUMBER          shift and go to state 41
    NAME            shift and go to state 57
    LPAR            shift and go to state 39
    RPAR            shift and go to state 42
    OPERATOR        shift and go to state 54
    LSQB            shift and go to state 55
    RSQB            shift and go to state 48
    COLON           shift and go to state 46
    PERIOD          shift and go to state 50
    RANGE           shift and go to state 52
    CLASS           shift and go to state 18
    DEF             shift and go to state 8
    IF              shift and go to state 30
    ELIF            shift and go to state 13
    ELSE            shift and go to state 23
    TRY             shift and go to state 24
    EXCEPT          shift and go to state 12
    FINALLY         shift and go to state 34
    WITH            shift and go to state 7
    WHILE           shift and go to state 5
    FOR             shift and go to state 20

  ! NEWLINE         [ reduce using rule 19 (stmt -> fragment .) ]
  ! LBRACE          [ reduce using rule 19 (stmt -> fragment .) ]
  ! RBRACE          [ reduce using rule 19 (stmt -> fragment .) ]
  ! STRING_END      [ reduce using rule 19 (stmt -> fragment .) ]
  ! STRING_CONTINUE [ reduce using rule 19 (stmt -> fragment .) ]
  ! STRING          [ reduce using rule 19 (stmt -> fragment .) ]
  ! STRING_START_TRIPLE [ reduce using rule 19 (stmt -> fragment .) ]
  ! WS              [ reduce using rule 19 (stmt -> fragment .) ]
  ! STRING_START_SINGLE [ reduce using rule 19 (stmt -> fragment .) ]
  ! NUMBER          [ reduce using rule 19 (stmt -> fragment .) ]
  ! NAME            [ reduce using rule 19 (stmt -> fragment .) ]
  ! LPAR            [ reduce using rule 19 (stmt -> fragment .) ]
  ! RPAR            [ reduce using rule 19 (stmt -> fragment .) ]
  ! LSQB            [ reduce using rule 19 (stmt -> fragment .) ]
  ! RSQB            [ reduce using rule 19 (stmt -> fragment .) ]
  ! COLON           [ reduce using rule 19 (stmt -> fragment .) ]
  ! OPERATOR        [ reduce using rule 19 (stmt -> fragment .) ]
  ! RANGE           [ reduce using rule 19 (stmt -> fragment .) ]
  ! CLASS           [ reduce using rule 19 (stmt -> fragment .) ]
  ! DEF             [ reduce using rule 19 (stmt -> fragment .) ]
  ! IF              [ reduce using rule 19 (stmt -> fragment .) ]
  ! ELIF            [ reduce using rule 19 (stmt -> fragment .) ]
  ! ELSE            [ reduce using rule 19 (stmt -> fragment .) ]
  ! TRY             [ reduce using rule 19 (stmt -> fragment .) ]
  ! EXCEPT          [ reduce using rule 19 (stmt -> fragment .) ]
  ! FINALLY         [ reduce using rule 19 (stmt -> fragment .) ]
  ! WITH            [ reduce using rule 19 (stmt -> fragment .) ]
  ! WHILE           [ reduce using rule 19 (stmt -> fragment .) ]
  ! FOR             [ reduce using rule 19 (stmt -> fragment .) ]

    block_keyword                  shift and go to state 53

state 22

    (16) suite -> stmt .

    NEWLINE         reduce using rule 16 (suite -> stmt .)
    LBRACE          reduce using rule 16 (suite -> stmt .)
    RBRACE          reduce using rule 16 (suite -> stmt .)
    STRING_END      reduce using rule 16 (suite -> stmt .)
    STRING_CONTINUE reduce using rule 16 (suite -> stmt .)
    STRING          reduce using rule 16 (suite -> stmt .)
    STRING_START_TRIPLE reduce using rule 16 (suite -> stmt .)
    WS              reduce using rule 16 (suite -> stmt .)
    STRING_START_SINGLE reduce using rule 16 (suite -> stmt .)
    NUMBER          reduce using rule 16 (suite -> stmt .)
    NAME            reduce using rule 16 (suite -> stmt .)
    LPAR            reduce using rule 16 (suite -> stmt .)
    RPAR            reduce using rule 16 (suite -> stmt .)
    LSQB            reduce using rule 16 (suite -> stmt .)
    RSQB            reduce using rule 16 (suite -> stmt .)
    COLON           reduce using rule 16 (suite -> stmt .)
    OPERATOR        reduce using rule 16 (suite -> stmt .)
    COMMENT         reduce using rule 16 (suite -> stmt .)
    RANGE           reduce using rule 16 (suite -> stmt .)
    CLASS           reduce using rule 16 (suite -> stmt .)
    DEF             reduce using rule 16 (suite -> stmt .)
    IF              reduce using rule 16 (suite -> stmt .)
    ELIF            reduce using rule 16 (suite -> stmt .)
    ELSE            reduce using rule 16 (suite -> stmt .)
    TRY             reduce using rule 16 (suite -> stmt .)
    EXCEPT          reduce using rule 16 (suite -> stmt .)
    FINALLY         reduce using rule 16 (suite -> stmt .)
    WITH            reduce using rule 16 (suite -> stmt .)
    WHILE           reduce using rule 16 (suite -> stmt .)
    FOR             reduce using rule 16 (suite -> stmt .)
    ENDMARKER       reduce using rule 16 (suite -> stmt .)
    DEDENT          reduce using rule 16 (suite -> stmt .)


state 23

    (9) block_keyword -> ELSE .

    LBRACE          reduce using rule 9 (block_keyword -> ELSE .)
    RBRACE          reduce using rule 9 (block_keyword -> ELSE .)
    STRING_END      reduce using rule 9 (block_keyword -> ELSE .)
    STRING_CONTINUE reduce using rule 9 (block_keyword -> ELSE .)
    STRING          reduce using rule 9 (block_keyword -> ELSE .)
    STRING_START_TRIPLE reduce using rule 9 (block_keyword -> ELSE .)
    WS              reduce using rule 9 (block_keyword -> ELSE .)
    STRING_START_SINGLE reduce using rule 9 (block_keyword -> ELSE .)
    NUMBER          reduce using rule 9 (block_keyword -> ELSE .)
    NAME            reduce using rule 9 (block_keyword -> ELSE .)
    LPAR            reduce using rule 9 (block_keyword -> ELSE .)
    RPAR            reduce using rule 9 (block_keyword -> ELSE .)
    LSQB            reduce using rule 9 (block_keyword -> ELSE .)
    RSQB            reduce using rule 9 (block_keyword -> ELSE .)
    COLON           reduce using rule 9 (block_keyword -> ELSE .)
    OPERATOR        reduce using rule 9 (block_keyword -> ELSE .)
    COMMENT         reduce using rule 9 (block_keyword -> ELSE .)
    RANGE           reduce using rule 9 (block_keyword -> ELSE .)
    CLASS           reduce using rule 9 (block_keyword -> ELSE .)
    DEF             reduce using rule 9 (block_keyword -> ELSE .)
    IF              reduce using rule 9 (block_keyword -> ELSE .)
    ELIF            reduce using rule 9 (block_keyword -> ELSE .)
    ELSE            reduce using rule 9 (block_keyword -> ELSE .)
    TRY             reduce using rule 9 (block_keyword -> ELSE .)
    EXCEPT          reduce using rule 9 (block_keyword -> ELSE .)
    FINALLY         reduce using rule 9 (block_keyword -> ELSE .)
    WITH            reduce using rule 9 (block_keyword -> ELSE .)
    WHILE           reduce using rule 9 (block_keyword -> ELSE .)
    FOR             reduce using rule 9 (block_keyword -> ELSE .)
    NEWLINE         reduce using rule 9 (block_keyword -> ELSE .)
    PERIOD          reduce using rule 9 (block_keyword -> ELSE .)
    ENDMARKER       reduce using rule 9 (block_keyword -> ELSE .)
    DEDENT          reduce using rule 9 (block_keyword -> ELSE .)


state 24

    (10) block_keyword -> TRY .

    LBRACE          reduce using rule 10 (block_keyword -> TRY .)
    RBRACE          reduce using rule 10 (block_keyword -> TRY .)
    STRING_END      reduce using rule 10 (block_keyword -> TRY .)
    STRING_CONTINUE reduce using rule 10 (block_keyword -> TRY .)
    STRING          reduce using rule 10 (block_keyword -> TRY .)
    STRING_START_TRIPLE reduce using rule 10 (block_keyword -> TRY .)
    WS              reduce using rule 10 (block_keyword -> TRY .)
    STRING_START_SINGLE reduce using rule 10 (block_keyword -> TRY .)
    NUMBER          reduce using rule 10 (block_keyword -> TRY .)
    NAME            reduce using rule 10 (block_keyword -> TRY .)
    LPAR            reduce using rule 10 (block_keyword -> TRY .)
    RPAR            reduce using rule 10 (block_keyword -> TRY .)
    LSQB            reduce using rule 10 (block_keyword -> TRY .)
    RSQB            reduce using rule 10 (block_keyword -> TRY .)
    COLON           reduce using rule 10 (block_keyword -> TRY .)
    OPERATOR        reduce using rule 10 (block_keyword -> TRY .)
    COMMENT         reduce using rule 10 (block_keyword -> TRY .)
    RANGE           reduce using rule 10 (block_keyword -> TRY .)
    CLASS           reduce using rule 10 (block_keyword -> TRY .)
    DEF             reduce using rule 10 (block_keyword -> TRY .)
    IF              reduce using rule 10 (block_keyword -> TRY .)
    ELIF            reduce using rule 10 (block_keyword -> TRY .)
    ELSE            reduce using rule 10 (block_keyword -> TRY .)
    TRY             reduce using rule 10 (block_keyword -> TRY .)
    EXCEPT          reduce using rule 10 (block_keyword -> TRY .)
    FINALLY         reduce using rule 10 (block_keyword -> TRY .)
    WITH            reduce using rule 10 (block_keyword -> TRY .)
    WHILE           reduce using rule 10 (block_keyword -> TRY .)
    FOR             reduce using rule 10 (block_keyword -> TRY .)
    NEWLINE         reduce using rule 10 (block_keyword -> TRY .)
    PERIOD          reduce using rule 10 (block_keyword -> TRY .)
    ENDMARKER       reduce using rule 10 (block_keyword -> TRY .)
    DEDENT          reduce using rule 10 (block_keyword -> TRY .)


state 25

    (59) fragment -> RANGE .

    NEWLINE         reduce using rule 59 (fragment -> RANGE .)
    LBRACE          reduce using rule 59 (fragment -> RANGE .)
    RBRACE          reduce using rule 59 (fragment -> RANGE .)
    STRING_END      reduce using rule 59 (fragment -> RANGE .)
    STRING_CONTINUE reduce using rule 59 (fragment -> RANGE .)
    STRING          reduce using rule 59 (fragment -> RANGE .)
    STRING_START_TRIPLE reduce using rule 59 (fragment -> RANGE .)
    WS              reduce using rule 59 (fragment -> RANGE .)
    STRING_START_SINGLE reduce using rule 59 (fragment -> RANGE .)
    NUMBER          reduce using rule 59 (fragment -> RANGE .)
    NAME            reduce using rule 59 (fragment -> RANGE .)
    LPAR            reduce using rule 59 (fragment -> RANGE .)
    RPAR            reduce using rule 59 (fragment -> RANGE .)
    OPERATOR        reduce using rule 59 (fragment -> RANGE .)
    LSQB            reduce using rule 59 (fragment -> RANGE .)
    RSQB            reduce using rule 59 (fragment -> RANGE .)
    COLON           reduce using rule 59 (fragment -> RANGE .)
    PERIOD          reduce using rule 59 (fragment -> RANGE .)
    RANGE           reduce using rule 59 (fragment -> RANGE .)
    CLASS           reduce using rule 59 (fragment -> RANGE .)
    DEF             reduce using rule 59 (fragment -> RANGE .)
    IF              reduce using rule 59 (fragment -> RANGE .)
    ELIF            reduce using rule 59 (fragment -> RANGE .)
    ELSE            reduce using rule 59 (fragment -> RANGE .)
    TRY             reduce using rule 59 (fragment -> RANGE .)
    EXCEPT          reduce using rule 59 (fragment -> RANGE .)
    FINALLY         reduce using rule 59 (fragment -> RANGE .)
    WITH            reduce using rule 59 (fragment -> RANGE .)
    WHILE           reduce using rule 59 (fragment -> RANGE .)
    FOR             reduce using rule 59 (fragment -> RANGE .)
    COMMENT         reduce using rule 59 (fragment -> RANGE .)
    ENDMARKER       reduce using rule 59 (fragment -> RANGE .)
    DEDENT          reduce using rule 59 (fragment -> RANGE .)


state 26

    (49) fragment -> STRING_START_SINGLE .

    NEWLINE         reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    LBRACE          reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    RBRACE          reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    STRING_END      reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    STRING_CONTINUE reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    STRING          reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    STRING_START_TRIPLE reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    WS              reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    STRING_START_SINGLE reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    NUMBER          reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    NAME            reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    LPAR            reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    RPAR            reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    OPERATOR        reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    LSQB            reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    RSQB            reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    COLON           reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    PERIOD          reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    RANGE           reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    CLASS           reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    DEF             reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    IF              reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    ELIF            reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    ELSE            reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    TRY             reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    EXCEPT          reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    FINALLY         reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    WITH            reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    WHILE           reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    FOR             reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    COMMENT         reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    ENDMARKER       reduce using rule 49 (fragment -> STRING_START_SINGLE .)
    DEDENT          reduce using rule 49 (fragment -> STRING_START_SINGLE .)


state 27

    (41) fragment -> block_keyword .
    (2) block -> block_keyword . fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> block_keyword . fragment COLON suite
    (4) block -> block_keyword . fragment COLON NEWLINE
    (22) fragment -> . fragment LBRACE
    (23) fragment -> . fragment RBRACE
    (24) fragment -> . fragment STRING_END
    (25) fragment -> . fragment STRING_CONTINUE
    (26) fragment -> . fragment STRING
    (27) fragment -> . fragment STRING_START_TRIPLE
    (28) fragment -> . fragment WS
    (29) fragment -> . fragment STRING_START_SINGLE
    (30) fragment -> . fragment NUMBER
    (31) fragment -> . fragment NAME
    (32) fragment -> . fragment LPAR
    (33) fragment -> . fragment RPAR
    (34) fragment -> . fragment OPERATOR
    (35) fragment -> . fragment LSQB
    (36) fragment -> . fragment RSQB
    (37) fragment -> . fragment COLON
    (38) fragment -> . fragment block_keyword
    (39) fragment -> . fragment PERIOD
    (40) fragment -> . fragment RANGE
    (41) fragment -> . block_keyword
    (42) fragment -> . LBRACE
    (43) fragment -> . RBRACE
    (44) fragment -> . STRING_END
    (45) fragment -> . STRING_CONTINUE
    (46) fragment -> . STRING
    (47) fragment -> . STRING_START_TRIPLE
    (48) fragment -> . WS
    (49) fragment -> . STRING_START_SINGLE
    (50) fragment -> . NUMBER
    (51) fragment -> . NAME
    (52) fragment -> . LPAR
    (53) fragment -> . RPAR
    (54) fragment -> . LSQB
    (55) fragment -> . RSQB
    (56) fragment -> . COLON
    (57) fragment -> . OPERATOR
    (58) fragment -> . COMMENT
    (59) fragment -> . RANGE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for STRING_END resolved as shift
  ! shift/reduce conflict for STRING_CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for STRING_START_TRIPLE resolved as shift
  ! shift/reduce conflict for WS resolved as shift
  ! shift/reduce conflict for STRING_START_SINGLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for RPAR resolved as shift
  ! shift/reduce conflict for LSQB resolved as shift
  ! shift/reduce conflict for RSQB resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for EXCEPT resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    NEWLINE         reduce using rule 41 (fragment -> block_keyword .)
    PERIOD          reduce using rule 41 (fragment -> block_keyword .)
    ENDMARKER       reduce using rule 41 (fragment -> block_keyword .)
    DEDENT          reduce using rule 41 (fragment -> block_keyword .)
    LBRACE          shift and go to state 31
    RBRACE          shift and go to state 19
    STRING_END      shift and go to state 16
    STRING_CONTINUE shift and go to state 35
    STRING          shift and go to state 9
    STRING_START_TRIPLE shift and go to state 2
    WS              shift and go to state 6
    STRING_START_SINGLE shift and go to state 26
    NUMBER          shift and go to state 3
    NAME            shift and go to state 32
    LPAR            shift and go to state 1
    RPAR            shift and go to state 4
    LSQB            shift and go to state 29
    RSQB            shift and go to state 17
    COLON           shift and go to state 14
    OPERATOR        shift and go to state 28
    COMMENT         shift and go to state 10
    RANGE           shift and go to state 25
    CLASS           shift and go to state 18
    DEF             shift and go to state 8
    IF              shift and go to state 30
    ELIF            shift and go to state 13
    ELSE            shift and go to state 23
    TRY             shift and go to state 24
    EXCEPT          shift and go to state 12
    FINALLY         shift and go to state 34
    WITH            shift and go to state 7
    WHILE           shift and go to state 5
    FOR             shift and go to state 20

  ! LBRACE          [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! RBRACE          [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! STRING_END      [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! STRING_CONTINUE [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! STRING          [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! STRING_START_TRIPLE [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! WS              [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! STRING_START_SINGLE [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! NUMBER          [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! NAME            [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! LPAR            [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! RPAR            [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! OPERATOR        [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! LSQB            [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! RSQB            [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! COLON           [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! RANGE           [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! CLASS           [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! DEF             [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! IF              [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! ELIF            [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! ELSE            [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! TRY             [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! EXCEPT          [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! FINALLY         [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! WITH            [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! WHILE           [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! FOR             [ reduce using rule 41 (fragment -> block_keyword .) ]
  ! COMMENT         [ reduce using rule 41 (fragment -> block_keyword .) ]

    fragment                       shift and go to state 59
    block_keyword                  shift and go to state 60

state 28

    (57) fragment -> OPERATOR .

    NEWLINE         reduce using rule 57 (fragment -> OPERATOR .)
    LBRACE          reduce using rule 57 (fragment -> OPERATOR .)
    RBRACE          reduce using rule 57 (fragment -> OPERATOR .)
    STRING_END      reduce using rule 57 (fragment -> OPERATOR .)
    STRING_CONTINUE reduce using rule 57 (fragment -> OPERATOR .)
    STRING          reduce using rule 57 (fragment -> OPERATOR .)
    STRING_START_TRIPLE reduce using rule 57 (fragment -> OPERATOR .)
    WS              reduce using rule 57 (fragment -> OPERATOR .)
    STRING_START_SINGLE reduce using rule 57 (fragment -> OPERATOR .)
    NUMBER          reduce using rule 57 (fragment -> OPERATOR .)
    NAME            reduce using rule 57 (fragment -> OPERATOR .)
    LPAR            reduce using rule 57 (fragment -> OPERATOR .)
    RPAR            reduce using rule 57 (fragment -> OPERATOR .)
    OPERATOR        reduce using rule 57 (fragment -> OPERATOR .)
    LSQB            reduce using rule 57 (fragment -> OPERATOR .)
    RSQB            reduce using rule 57 (fragment -> OPERATOR .)
    COLON           reduce using rule 57 (fragment -> OPERATOR .)
    PERIOD          reduce using rule 57 (fragment -> OPERATOR .)
    RANGE           reduce using rule 57 (fragment -> OPERATOR .)
    CLASS           reduce using rule 57 (fragment -> OPERATOR .)
    DEF             reduce using rule 57 (fragment -> OPERATOR .)
    IF              reduce using rule 57 (fragment -> OPERATOR .)
    ELIF            reduce using rule 57 (fragment -> OPERATOR .)
    ELSE            reduce using rule 57 (fragment -> OPERATOR .)
    TRY             reduce using rule 57 (fragment -> OPERATOR .)
    EXCEPT          reduce using rule 57 (fragment -> OPERATOR .)
    FINALLY         reduce using rule 57 (fragment -> OPERATOR .)
    WITH            reduce using rule 57 (fragment -> OPERATOR .)
    WHILE           reduce using rule 57 (fragment -> OPERATOR .)
    FOR             reduce using rule 57 (fragment -> OPERATOR .)
    COMMENT         reduce using rule 57 (fragment -> OPERATOR .)
    ENDMARKER       reduce using rule 57 (fragment -> OPERATOR .)
    DEDENT          reduce using rule 57 (fragment -> OPERATOR .)


state 29

    (54) fragment -> LSQB .

    NEWLINE         reduce using rule 54 (fragment -> LSQB .)
    LBRACE          reduce using rule 54 (fragment -> LSQB .)
    RBRACE          reduce using rule 54 (fragment -> LSQB .)
    STRING_END      reduce using rule 54 (fragment -> LSQB .)
    STRING_CONTINUE reduce using rule 54 (fragment -> LSQB .)
    STRING          reduce using rule 54 (fragment -> LSQB .)
    STRING_START_TRIPLE reduce using rule 54 (fragment -> LSQB .)
    WS              reduce using rule 54 (fragment -> LSQB .)
    STRING_START_SINGLE reduce using rule 54 (fragment -> LSQB .)
    NUMBER          reduce using rule 54 (fragment -> LSQB .)
    NAME            reduce using rule 54 (fragment -> LSQB .)
    LPAR            reduce using rule 54 (fragment -> LSQB .)
    RPAR            reduce using rule 54 (fragment -> LSQB .)
    OPERATOR        reduce using rule 54 (fragment -> LSQB .)
    LSQB            reduce using rule 54 (fragment -> LSQB .)
    RSQB            reduce using rule 54 (fragment -> LSQB .)
    COLON           reduce using rule 54 (fragment -> LSQB .)
    PERIOD          reduce using rule 54 (fragment -> LSQB .)
    RANGE           reduce using rule 54 (fragment -> LSQB .)
    CLASS           reduce using rule 54 (fragment -> LSQB .)
    DEF             reduce using rule 54 (fragment -> LSQB .)
    IF              reduce using rule 54 (fragment -> LSQB .)
    ELIF            reduce using rule 54 (fragment -> LSQB .)
    ELSE            reduce using rule 54 (fragment -> LSQB .)
    TRY             reduce using rule 54 (fragment -> LSQB .)
    EXCEPT          reduce using rule 54 (fragment -> LSQB .)
    FINALLY         reduce using rule 54 (fragment -> LSQB .)
    WITH            reduce using rule 54 (fragment -> LSQB .)
    WHILE           reduce using rule 54 (fragment -> LSQB .)
    FOR             reduce using rule 54 (fragment -> LSQB .)
    COMMENT         reduce using rule 54 (fragment -> LSQB .)
    ENDMARKER       reduce using rule 54 (fragment -> LSQB .)
    DEDENT          reduce using rule 54 (fragment -> LSQB .)


state 30

    (7) block_keyword -> IF .

    LBRACE          reduce using rule 7 (block_keyword -> IF .)
    RBRACE          reduce using rule 7 (block_keyword -> IF .)
    STRING_END      reduce using rule 7 (block_keyword -> IF .)
    STRING_CONTINUE reduce using rule 7 (block_keyword -> IF .)
    STRING          reduce using rule 7 (block_keyword -> IF .)
    STRING_START_TRIPLE reduce using rule 7 (block_keyword -> IF .)
    WS              reduce using rule 7 (block_keyword -> IF .)
    STRING_START_SINGLE reduce using rule 7 (block_keyword -> IF .)
    NUMBER          reduce using rule 7 (block_keyword -> IF .)
    NAME            reduce using rule 7 (block_keyword -> IF .)
    LPAR            reduce using rule 7 (block_keyword -> IF .)
    RPAR            reduce using rule 7 (block_keyword -> IF .)
    LSQB            reduce using rule 7 (block_keyword -> IF .)
    RSQB            reduce using rule 7 (block_keyword -> IF .)
    COLON           reduce using rule 7 (block_keyword -> IF .)
    OPERATOR        reduce using rule 7 (block_keyword -> IF .)
    COMMENT         reduce using rule 7 (block_keyword -> IF .)
    RANGE           reduce using rule 7 (block_keyword -> IF .)
    CLASS           reduce using rule 7 (block_keyword -> IF .)
    DEF             reduce using rule 7 (block_keyword -> IF .)
    IF              reduce using rule 7 (block_keyword -> IF .)
    ELIF            reduce using rule 7 (block_keyword -> IF .)
    ELSE            reduce using rule 7 (block_keyword -> IF .)
    TRY             reduce using rule 7 (block_keyword -> IF .)
    EXCEPT          reduce using rule 7 (block_keyword -> IF .)
    FINALLY         reduce using rule 7 (block_keyword -> IF .)
    WITH            reduce using rule 7 (block_keyword -> IF .)
    WHILE           reduce using rule 7 (block_keyword -> IF .)
    FOR             reduce using rule 7 (block_keyword -> IF .)
    NEWLINE         reduce using rule 7 (block_keyword -> IF .)
    PERIOD          reduce using rule 7 (block_keyword -> IF .)
    ENDMARKER       reduce using rule 7 (block_keyword -> IF .)
    DEDENT          reduce using rule 7 (block_keyword -> IF .)


state 31

    (42) fragment -> LBRACE .

    NEWLINE         reduce using rule 42 (fragment -> LBRACE .)
    LBRACE          reduce using rule 42 (fragment -> LBRACE .)
    RBRACE          reduce using rule 42 (fragment -> LBRACE .)
    STRING_END      reduce using rule 42 (fragment -> LBRACE .)
    STRING_CONTINUE reduce using rule 42 (fragment -> LBRACE .)
    STRING          reduce using rule 42 (fragment -> LBRACE .)
    STRING_START_TRIPLE reduce using rule 42 (fragment -> LBRACE .)
    WS              reduce using rule 42 (fragment -> LBRACE .)
    STRING_START_SINGLE reduce using rule 42 (fragment -> LBRACE .)
    NUMBER          reduce using rule 42 (fragment -> LBRACE .)
    NAME            reduce using rule 42 (fragment -> LBRACE .)
    LPAR            reduce using rule 42 (fragment -> LBRACE .)
    RPAR            reduce using rule 42 (fragment -> LBRACE .)
    OPERATOR        reduce using rule 42 (fragment -> LBRACE .)
    LSQB            reduce using rule 42 (fragment -> LBRACE .)
    RSQB            reduce using rule 42 (fragment -> LBRACE .)
    COLON           reduce using rule 42 (fragment -> LBRACE .)
    PERIOD          reduce using rule 42 (fragment -> LBRACE .)
    RANGE           reduce using rule 42 (fragment -> LBRACE .)
    CLASS           reduce using rule 42 (fragment -> LBRACE .)
    DEF             reduce using rule 42 (fragment -> LBRACE .)
    IF              reduce using rule 42 (fragment -> LBRACE .)
    ELIF            reduce using rule 42 (fragment -> LBRACE .)
    ELSE            reduce using rule 42 (fragment -> LBRACE .)
    TRY             reduce using rule 42 (fragment -> LBRACE .)
    EXCEPT          reduce using rule 42 (fragment -> LBRACE .)
    FINALLY         reduce using rule 42 (fragment -> LBRACE .)
    WITH            reduce using rule 42 (fragment -> LBRACE .)
    WHILE           reduce using rule 42 (fragment -> LBRACE .)
    FOR             reduce using rule 42 (fragment -> LBRACE .)
    COMMENT         reduce using rule 42 (fragment -> LBRACE .)
    ENDMARKER       reduce using rule 42 (fragment -> LBRACE .)
    DEDENT          reduce using rule 42 (fragment -> LBRACE .)


state 32

    (51) fragment -> NAME .

    NEWLINE         reduce using rule 51 (fragment -> NAME .)
    LBRACE          reduce using rule 51 (fragment -> NAME .)
    RBRACE          reduce using rule 51 (fragment -> NAME .)
    STRING_END      reduce using rule 51 (fragment -> NAME .)
    STRING_CONTINUE reduce using rule 51 (fragment -> NAME .)
    STRING          reduce using rule 51 (fragment -> NAME .)
    STRING_START_TRIPLE reduce using rule 51 (fragment -> NAME .)
    WS              reduce using rule 51 (fragment -> NAME .)
    STRING_START_SINGLE reduce using rule 51 (fragment -> NAME .)
    NUMBER          reduce using rule 51 (fragment -> NAME .)
    NAME            reduce using rule 51 (fragment -> NAME .)
    LPAR            reduce using rule 51 (fragment -> NAME .)
    RPAR            reduce using rule 51 (fragment -> NAME .)
    OPERATOR        reduce using rule 51 (fragment -> NAME .)
    LSQB            reduce using rule 51 (fragment -> NAME .)
    RSQB            reduce using rule 51 (fragment -> NAME .)
    COLON           reduce using rule 51 (fragment -> NAME .)
    PERIOD          reduce using rule 51 (fragment -> NAME .)
    RANGE           reduce using rule 51 (fragment -> NAME .)
    CLASS           reduce using rule 51 (fragment -> NAME .)
    DEF             reduce using rule 51 (fragment -> NAME .)
    IF              reduce using rule 51 (fragment -> NAME .)
    ELIF            reduce using rule 51 (fragment -> NAME .)
    ELSE            reduce using rule 51 (fragment -> NAME .)
    TRY             reduce using rule 51 (fragment -> NAME .)
    EXCEPT          reduce using rule 51 (fragment -> NAME .)
    FINALLY         reduce using rule 51 (fragment -> NAME .)
    WITH            reduce using rule 51 (fragment -> NAME .)
    WHILE           reduce using rule 51 (fragment -> NAME .)
    FOR             reduce using rule 51 (fragment -> NAME .)
    COMMENT         reduce using rule 51 (fragment -> NAME .)
    ENDMARKER       reduce using rule 51 (fragment -> NAME .)
    DEDENT          reduce using rule 51 (fragment -> NAME .)


state 33

    (0) S' -> file_input .



state 34

    (12) block_keyword -> FINALLY .

    LBRACE          reduce using rule 12 (block_keyword -> FINALLY .)
    RBRACE          reduce using rule 12 (block_keyword -> FINALLY .)
    STRING_END      reduce using rule 12 (block_keyword -> FINALLY .)
    STRING_CONTINUE reduce using rule 12 (block_keyword -> FINALLY .)
    STRING          reduce using rule 12 (block_keyword -> FINALLY .)
    STRING_START_TRIPLE reduce using rule 12 (block_keyword -> FINALLY .)
    WS              reduce using rule 12 (block_keyword -> FINALLY .)
    STRING_START_SINGLE reduce using rule 12 (block_keyword -> FINALLY .)
    NUMBER          reduce using rule 12 (block_keyword -> FINALLY .)
    NAME            reduce using rule 12 (block_keyword -> FINALLY .)
    LPAR            reduce using rule 12 (block_keyword -> FINALLY .)
    RPAR            reduce using rule 12 (block_keyword -> FINALLY .)
    LSQB            reduce using rule 12 (block_keyword -> FINALLY .)
    RSQB            reduce using rule 12 (block_keyword -> FINALLY .)
    COLON           reduce using rule 12 (block_keyword -> FINALLY .)
    OPERATOR        reduce using rule 12 (block_keyword -> FINALLY .)
    COMMENT         reduce using rule 12 (block_keyword -> FINALLY .)
    RANGE           reduce using rule 12 (block_keyword -> FINALLY .)
    CLASS           reduce using rule 12 (block_keyword -> FINALLY .)
    DEF             reduce using rule 12 (block_keyword -> FINALLY .)
    IF              reduce using rule 12 (block_keyword -> FINALLY .)
    ELIF            reduce using rule 12 (block_keyword -> FINALLY .)
    ELSE            reduce using rule 12 (block_keyword -> FINALLY .)
    TRY             reduce using rule 12 (block_keyword -> FINALLY .)
    EXCEPT          reduce using rule 12 (block_keyword -> FINALLY .)
    FINALLY         reduce using rule 12 (block_keyword -> FINALLY .)
    WITH            reduce using rule 12 (block_keyword -> FINALLY .)
    WHILE           reduce using rule 12 (block_keyword -> FINALLY .)
    FOR             reduce using rule 12 (block_keyword -> FINALLY .)
    NEWLINE         reduce using rule 12 (block_keyword -> FINALLY .)
    PERIOD          reduce using rule 12 (block_keyword -> FINALLY .)
    ENDMARKER       reduce using rule 12 (block_keyword -> FINALLY .)
    DEDENT          reduce using rule 12 (block_keyword -> FINALLY .)


state 35

    (45) fragment -> STRING_CONTINUE .

    NEWLINE         reduce using rule 45 (fragment -> STRING_CONTINUE .)
    LBRACE          reduce using rule 45 (fragment -> STRING_CONTINUE .)
    RBRACE          reduce using rule 45 (fragment -> STRING_CONTINUE .)
    STRING_END      reduce using rule 45 (fragment -> STRING_CONTINUE .)
    STRING_CONTINUE reduce using rule 45 (fragment -> STRING_CONTINUE .)
    STRING          reduce using rule 45 (fragment -> STRING_CONTINUE .)
    STRING_START_TRIPLE reduce using rule 45 (fragment -> STRING_CONTINUE .)
    WS              reduce using rule 45 (fragment -> STRING_CONTINUE .)
    STRING_START_SINGLE reduce using rule 45 (fragment -> STRING_CONTINUE .)
    NUMBER          reduce using rule 45 (fragment -> STRING_CONTINUE .)
    NAME            reduce using rule 45 (fragment -> STRING_CONTINUE .)
    LPAR            reduce using rule 45 (fragment -> STRING_CONTINUE .)
    RPAR            reduce using rule 45 (fragment -> STRING_CONTINUE .)
    OPERATOR        reduce using rule 45 (fragment -> STRING_CONTINUE .)
    LSQB            reduce using rule 45 (fragment -> STRING_CONTINUE .)
    RSQB            reduce using rule 45 (fragment -> STRING_CONTINUE .)
    COLON           reduce using rule 45 (fragment -> STRING_CONTINUE .)
    PERIOD          reduce using rule 45 (fragment -> STRING_CONTINUE .)
    RANGE           reduce using rule 45 (fragment -> STRING_CONTINUE .)
    CLASS           reduce using rule 45 (fragment -> STRING_CONTINUE .)
    DEF             reduce using rule 45 (fragment -> STRING_CONTINUE .)
    IF              reduce using rule 45 (fragment -> STRING_CONTINUE .)
    ELIF            reduce using rule 45 (fragment -> STRING_CONTINUE .)
    ELSE            reduce using rule 45 (fragment -> STRING_CONTINUE .)
    TRY             reduce using rule 45 (fragment -> STRING_CONTINUE .)
    EXCEPT          reduce using rule 45 (fragment -> STRING_CONTINUE .)
    FINALLY         reduce using rule 45 (fragment -> STRING_CONTINUE .)
    WITH            reduce using rule 45 (fragment -> STRING_CONTINUE .)
    WHILE           reduce using rule 45 (fragment -> STRING_CONTINUE .)
    FOR             reduce using rule 45 (fragment -> STRING_CONTINUE .)
    COMMENT         reduce using rule 45 (fragment -> STRING_CONTINUE .)
    ENDMARKER       reduce using rule 45 (fragment -> STRING_CONTINUE .)
    DEDENT          reduce using rule 45 (fragment -> STRING_CONTINUE .)


state 36

    (21) stmt -> block .

    DEDENT          reduce using rule 21 (stmt -> block .)
    NEWLINE         reduce using rule 21 (stmt -> block .)
    LBRACE          reduce using rule 21 (stmt -> block .)
    RBRACE          reduce using rule 21 (stmt -> block .)
    STRING_END      reduce using rule 21 (stmt -> block .)
    STRING_CONTINUE reduce using rule 21 (stmt -> block .)
    STRING          reduce using rule 21 (stmt -> block .)
    STRING_START_TRIPLE reduce using rule 21 (stmt -> block .)
    WS              reduce using rule 21 (stmt -> block .)
    STRING_START_SINGLE reduce using rule 21 (stmt -> block .)
    NUMBER          reduce using rule 21 (stmt -> block .)
    NAME            reduce using rule 21 (stmt -> block .)
    LPAR            reduce using rule 21 (stmt -> block .)
    RPAR            reduce using rule 21 (stmt -> block .)
    LSQB            reduce using rule 21 (stmt -> block .)
    RSQB            reduce using rule 21 (stmt -> block .)
    COLON           reduce using rule 21 (stmt -> block .)
    OPERATOR        reduce using rule 21 (stmt -> block .)
    COMMENT         reduce using rule 21 (stmt -> block .)
    RANGE           reduce using rule 21 (stmt -> block .)
    CLASS           reduce using rule 21 (stmt -> block .)
    DEF             reduce using rule 21 (stmt -> block .)
    IF              reduce using rule 21 (stmt -> block .)
    ELIF            reduce using rule 21 (stmt -> block .)
    ELSE            reduce using rule 21 (stmt -> block .)
    TRY             reduce using rule 21 (stmt -> block .)
    EXCEPT          reduce using rule 21 (stmt -> block .)
    FINALLY         reduce using rule 21 (stmt -> block .)
    WITH            reduce using rule 21 (stmt -> block .)
    WHILE           reduce using rule 21 (stmt -> block .)
    FOR             reduce using rule 21 (stmt -> block .)
    ENDMARKER       reduce using rule 21 (stmt -> block .)


state 37

    (1) file_input -> suite ENDMARKER .

    $end            reduce using rule 1 (file_input -> suite ENDMARKER .)


state 38

    (17) suite -> suite stmt .

    NEWLINE         reduce using rule 17 (suite -> suite stmt .)
    LBRACE          reduce using rule 17 (suite -> suite stmt .)
    RBRACE          reduce using rule 17 (suite -> suite stmt .)
    STRING_END      reduce using rule 17 (suite -> suite stmt .)
    STRING_CONTINUE reduce using rule 17 (suite -> suite stmt .)
    STRING          reduce using rule 17 (suite -> suite stmt .)
    STRING_START_TRIPLE reduce using rule 17 (suite -> suite stmt .)
    WS              reduce using rule 17 (suite -> suite stmt .)
    STRING_START_SINGLE reduce using rule 17 (suite -> suite stmt .)
    NUMBER          reduce using rule 17 (suite -> suite stmt .)
    NAME            reduce using rule 17 (suite -> suite stmt .)
    LPAR            reduce using rule 17 (suite -> suite stmt .)
    RPAR            reduce using rule 17 (suite -> suite stmt .)
    LSQB            reduce using rule 17 (suite -> suite stmt .)
    RSQB            reduce using rule 17 (suite -> suite stmt .)
    COLON           reduce using rule 17 (suite -> suite stmt .)
    OPERATOR        reduce using rule 17 (suite -> suite stmt .)
    COMMENT         reduce using rule 17 (suite -> suite stmt .)
    RANGE           reduce using rule 17 (suite -> suite stmt .)
    CLASS           reduce using rule 17 (suite -> suite stmt .)
    DEF             reduce using rule 17 (suite -> suite stmt .)
    IF              reduce using rule 17 (suite -> suite stmt .)
    ELIF            reduce using rule 17 (suite -> suite stmt .)
    ELSE            reduce using rule 17 (suite -> suite stmt .)
    TRY             reduce using rule 17 (suite -> suite stmt .)
    EXCEPT          reduce using rule 17 (suite -> suite stmt .)
    FINALLY         reduce using rule 17 (suite -> suite stmt .)
    WITH            reduce using rule 17 (suite -> suite stmt .)
    WHILE           reduce using rule 17 (suite -> suite stmt .)
    FOR             reduce using rule 17 (suite -> suite stmt .)
    ENDMARKER       reduce using rule 17 (suite -> suite stmt .)
    DEDENT          reduce using rule 17 (suite -> suite stmt .)


state 39

    (32) fragment -> fragment LPAR .

    NEWLINE         reduce using rule 32 (fragment -> fragment LPAR .)
    LBRACE          reduce using rule 32 (fragment -> fragment LPAR .)
    RBRACE          reduce using rule 32 (fragment -> fragment LPAR .)
    STRING_END      reduce using rule 32 (fragment -> fragment LPAR .)
    STRING_CONTINUE reduce using rule 32 (fragment -> fragment LPAR .)
    STRING          reduce using rule 32 (fragment -> fragment LPAR .)
    STRING_START_TRIPLE reduce using rule 32 (fragment -> fragment LPAR .)
    WS              reduce using rule 32 (fragment -> fragment LPAR .)
    STRING_START_SINGLE reduce using rule 32 (fragment -> fragment LPAR .)
    NUMBER          reduce using rule 32 (fragment -> fragment LPAR .)
    NAME            reduce using rule 32 (fragment -> fragment LPAR .)
    LPAR            reduce using rule 32 (fragment -> fragment LPAR .)
    RPAR            reduce using rule 32 (fragment -> fragment LPAR .)
    OPERATOR        reduce using rule 32 (fragment -> fragment LPAR .)
    LSQB            reduce using rule 32 (fragment -> fragment LPAR .)
    RSQB            reduce using rule 32 (fragment -> fragment LPAR .)
    COLON           reduce using rule 32 (fragment -> fragment LPAR .)
    PERIOD          reduce using rule 32 (fragment -> fragment LPAR .)
    RANGE           reduce using rule 32 (fragment -> fragment LPAR .)
    CLASS           reduce using rule 32 (fragment -> fragment LPAR .)
    DEF             reduce using rule 32 (fragment -> fragment LPAR .)
    IF              reduce using rule 32 (fragment -> fragment LPAR .)
    ELIF            reduce using rule 32 (fragment -> fragment LPAR .)
    ELSE            reduce using rule 32 (fragment -> fragment LPAR .)
    TRY             reduce using rule 32 (fragment -> fragment LPAR .)
    EXCEPT          reduce using rule 32 (fragment -> fragment LPAR .)
    FINALLY         reduce using rule 32 (fragment -> fragment LPAR .)
    WITH            reduce using rule 32 (fragment -> fragment LPAR .)
    WHILE           reduce using rule 32 (fragment -> fragment LPAR .)
    FOR             reduce using rule 32 (fragment -> fragment LPAR .)
    COMMENT         reduce using rule 32 (fragment -> fragment LPAR .)
    ENDMARKER       reduce using rule 32 (fragment -> fragment LPAR .)
    DEDENT          reduce using rule 32 (fragment -> fragment LPAR .)


state 40

    (27) fragment -> fragment STRING_START_TRIPLE .

    NEWLINE         reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    LBRACE          reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    RBRACE          reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    STRING_END      reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    STRING_CONTINUE reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    STRING          reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    STRING_START_TRIPLE reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    WS              reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    STRING_START_SINGLE reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    NUMBER          reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    NAME            reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    LPAR            reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    RPAR            reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    OPERATOR        reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    LSQB            reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    RSQB            reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    COLON           reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    PERIOD          reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    RANGE           reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    CLASS           reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    DEF             reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    IF              reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    ELIF            reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    ELSE            reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    TRY             reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    EXCEPT          reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    FINALLY         reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    WITH            reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    WHILE           reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    FOR             reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    COMMENT         reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    ENDMARKER       reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)
    DEDENT          reduce using rule 27 (fragment -> fragment STRING_START_TRIPLE .)


state 41

    (30) fragment -> fragment NUMBER .

    NEWLINE         reduce using rule 30 (fragment -> fragment NUMBER .)
    LBRACE          reduce using rule 30 (fragment -> fragment NUMBER .)
    RBRACE          reduce using rule 30 (fragment -> fragment NUMBER .)
    STRING_END      reduce using rule 30 (fragment -> fragment NUMBER .)
    STRING_CONTINUE reduce using rule 30 (fragment -> fragment NUMBER .)
    STRING          reduce using rule 30 (fragment -> fragment NUMBER .)
    STRING_START_TRIPLE reduce using rule 30 (fragment -> fragment NUMBER .)
    WS              reduce using rule 30 (fragment -> fragment NUMBER .)
    STRING_START_SINGLE reduce using rule 30 (fragment -> fragment NUMBER .)
    NUMBER          reduce using rule 30 (fragment -> fragment NUMBER .)
    NAME            reduce using rule 30 (fragment -> fragment NUMBER .)
    LPAR            reduce using rule 30 (fragment -> fragment NUMBER .)
    RPAR            reduce using rule 30 (fragment -> fragment NUMBER .)
    OPERATOR        reduce using rule 30 (fragment -> fragment NUMBER .)
    LSQB            reduce using rule 30 (fragment -> fragment NUMBER .)
    RSQB            reduce using rule 30 (fragment -> fragment NUMBER .)
    COLON           reduce using rule 30 (fragment -> fragment NUMBER .)
    PERIOD          reduce using rule 30 (fragment -> fragment NUMBER .)
    RANGE           reduce using rule 30 (fragment -> fragment NUMBER .)
    CLASS           reduce using rule 30 (fragment -> fragment NUMBER .)
    DEF             reduce using rule 30 (fragment -> fragment NUMBER .)
    IF              reduce using rule 30 (fragment -> fragment NUMBER .)
    ELIF            reduce using rule 30 (fragment -> fragment NUMBER .)
    ELSE            reduce using rule 30 (fragment -> fragment NUMBER .)
    TRY             reduce using rule 30 (fragment -> fragment NUMBER .)
    EXCEPT          reduce using rule 30 (fragment -> fragment NUMBER .)
    FINALLY         reduce using rule 30 (fragment -> fragment NUMBER .)
    WITH            reduce using rule 30 (fragment -> fragment NUMBER .)
    WHILE           reduce using rule 30 (fragment -> fragment NUMBER .)
    FOR             reduce using rule 30 (fragment -> fragment NUMBER .)
    COMMENT         reduce using rule 30 (fragment -> fragment NUMBER .)
    ENDMARKER       reduce using rule 30 (fragment -> fragment NUMBER .)
    DEDENT          reduce using rule 30 (fragment -> fragment NUMBER .)


state 42

    (33) fragment -> fragment RPAR .

    NEWLINE         reduce using rule 33 (fragment -> fragment RPAR .)
    LBRACE          reduce using rule 33 (fragment -> fragment RPAR .)
    RBRACE          reduce using rule 33 (fragment -> fragment RPAR .)
    STRING_END      reduce using rule 33 (fragment -> fragment RPAR .)
    STRING_CONTINUE reduce using rule 33 (fragment -> fragment RPAR .)
    STRING          reduce using rule 33 (fragment -> fragment RPAR .)
    STRING_START_TRIPLE reduce using rule 33 (fragment -> fragment RPAR .)
    WS              reduce using rule 33 (fragment -> fragment RPAR .)
    STRING_START_SINGLE reduce using rule 33 (fragment -> fragment RPAR .)
    NUMBER          reduce using rule 33 (fragment -> fragment RPAR .)
    NAME            reduce using rule 33 (fragment -> fragment RPAR .)
    LPAR            reduce using rule 33 (fragment -> fragment RPAR .)
    RPAR            reduce using rule 33 (fragment -> fragment RPAR .)
    OPERATOR        reduce using rule 33 (fragment -> fragment RPAR .)
    LSQB            reduce using rule 33 (fragment -> fragment RPAR .)
    RSQB            reduce using rule 33 (fragment -> fragment RPAR .)
    COLON           reduce using rule 33 (fragment -> fragment RPAR .)
    PERIOD          reduce using rule 33 (fragment -> fragment RPAR .)
    RANGE           reduce using rule 33 (fragment -> fragment RPAR .)
    CLASS           reduce using rule 33 (fragment -> fragment RPAR .)
    DEF             reduce using rule 33 (fragment -> fragment RPAR .)
    IF              reduce using rule 33 (fragment -> fragment RPAR .)
    ELIF            reduce using rule 33 (fragment -> fragment RPAR .)
    ELSE            reduce using rule 33 (fragment -> fragment RPAR .)
    TRY             reduce using rule 33 (fragment -> fragment RPAR .)
    EXCEPT          reduce using rule 33 (fragment -> fragment RPAR .)
    FINALLY         reduce using rule 33 (fragment -> fragment RPAR .)
    WITH            reduce using rule 33 (fragment -> fragment RPAR .)
    WHILE           reduce using rule 33 (fragment -> fragment RPAR .)
    FOR             reduce using rule 33 (fragment -> fragment RPAR .)
    COMMENT         reduce using rule 33 (fragment -> fragment RPAR .)
    ENDMARKER       reduce using rule 33 (fragment -> fragment RPAR .)
    DEDENT          reduce using rule 33 (fragment -> fragment RPAR .)


state 43

    (28) fragment -> fragment WS .

    NEWLINE         reduce using rule 28 (fragment -> fragment WS .)
    LBRACE          reduce using rule 28 (fragment -> fragment WS .)
    RBRACE          reduce using rule 28 (fragment -> fragment WS .)
    STRING_END      reduce using rule 28 (fragment -> fragment WS .)
    STRING_CONTINUE reduce using rule 28 (fragment -> fragment WS .)
    STRING          reduce using rule 28 (fragment -> fragment WS .)
    STRING_START_TRIPLE reduce using rule 28 (fragment -> fragment WS .)
    WS              reduce using rule 28 (fragment -> fragment WS .)
    STRING_START_SINGLE reduce using rule 28 (fragment -> fragment WS .)
    NUMBER          reduce using rule 28 (fragment -> fragment WS .)
    NAME            reduce using rule 28 (fragment -> fragment WS .)
    LPAR            reduce using rule 28 (fragment -> fragment WS .)
    RPAR            reduce using rule 28 (fragment -> fragment WS .)
    OPERATOR        reduce using rule 28 (fragment -> fragment WS .)
    LSQB            reduce using rule 28 (fragment -> fragment WS .)
    RSQB            reduce using rule 28 (fragment -> fragment WS .)
    COLON           reduce using rule 28 (fragment -> fragment WS .)
    PERIOD          reduce using rule 28 (fragment -> fragment WS .)
    RANGE           reduce using rule 28 (fragment -> fragment WS .)
    CLASS           reduce using rule 28 (fragment -> fragment WS .)
    DEF             reduce using rule 28 (fragment -> fragment WS .)
    IF              reduce using rule 28 (fragment -> fragment WS .)
    ELIF            reduce using rule 28 (fragment -> fragment WS .)
    ELSE            reduce using rule 28 (fragment -> fragment WS .)
    TRY             reduce using rule 28 (fragment -> fragment WS .)
    EXCEPT          reduce using rule 28 (fragment -> fragment WS .)
    FINALLY         reduce using rule 28 (fragment -> fragment WS .)
    WITH            reduce using rule 28 (fragment -> fragment WS .)
    WHILE           reduce using rule 28 (fragment -> fragment WS .)
    FOR             reduce using rule 28 (fragment -> fragment WS .)
    COMMENT         reduce using rule 28 (fragment -> fragment WS .)
    ENDMARKER       reduce using rule 28 (fragment -> fragment WS .)
    DEDENT          reduce using rule 28 (fragment -> fragment WS .)


state 44

    (26) fragment -> fragment STRING .

    NEWLINE         reduce using rule 26 (fragment -> fragment STRING .)
    LBRACE          reduce using rule 26 (fragment -> fragment STRING .)
    RBRACE          reduce using rule 26 (fragment -> fragment STRING .)
    STRING_END      reduce using rule 26 (fragment -> fragment STRING .)
    STRING_CONTINUE reduce using rule 26 (fragment -> fragment STRING .)
    STRING          reduce using rule 26 (fragment -> fragment STRING .)
    STRING_START_TRIPLE reduce using rule 26 (fragment -> fragment STRING .)
    WS              reduce using rule 26 (fragment -> fragment STRING .)
    STRING_START_SINGLE reduce using rule 26 (fragment -> fragment STRING .)
    NUMBER          reduce using rule 26 (fragment -> fragment STRING .)
    NAME            reduce using rule 26 (fragment -> fragment STRING .)
    LPAR            reduce using rule 26 (fragment -> fragment STRING .)
    RPAR            reduce using rule 26 (fragment -> fragment STRING .)
    OPERATOR        reduce using rule 26 (fragment -> fragment STRING .)
    LSQB            reduce using rule 26 (fragment -> fragment STRING .)
    RSQB            reduce using rule 26 (fragment -> fragment STRING .)
    COLON           reduce using rule 26 (fragment -> fragment STRING .)
    PERIOD          reduce using rule 26 (fragment -> fragment STRING .)
    RANGE           reduce using rule 26 (fragment -> fragment STRING .)
    CLASS           reduce using rule 26 (fragment -> fragment STRING .)
    DEF             reduce using rule 26 (fragment -> fragment STRING .)
    IF              reduce using rule 26 (fragment -> fragment STRING .)
    ELIF            reduce using rule 26 (fragment -> fragment STRING .)
    ELSE            reduce using rule 26 (fragment -> fragment STRING .)
    TRY             reduce using rule 26 (fragment -> fragment STRING .)
    EXCEPT          reduce using rule 26 (fragment -> fragment STRING .)
    FINALLY         reduce using rule 26 (fragment -> fragment STRING .)
    WITH            reduce using rule 26 (fragment -> fragment STRING .)
    WHILE           reduce using rule 26 (fragment -> fragment STRING .)
    FOR             reduce using rule 26 (fragment -> fragment STRING .)
    COMMENT         reduce using rule 26 (fragment -> fragment STRING .)
    ENDMARKER       reduce using rule 26 (fragment -> fragment STRING .)
    DEDENT          reduce using rule 26 (fragment -> fragment STRING .)


state 45

    (18) stmt -> fragment NEWLINE .

    DEDENT          reduce using rule 18 (stmt -> fragment NEWLINE .)
    NEWLINE         reduce using rule 18 (stmt -> fragment NEWLINE .)
    LBRACE          reduce using rule 18 (stmt -> fragment NEWLINE .)
    RBRACE          reduce using rule 18 (stmt -> fragment NEWLINE .)
    STRING_END      reduce using rule 18 (stmt -> fragment NEWLINE .)
    STRING_CONTINUE reduce using rule 18 (stmt -> fragment NEWLINE .)
    STRING          reduce using rule 18 (stmt -> fragment NEWLINE .)
    STRING_START_TRIPLE reduce using rule 18 (stmt -> fragment NEWLINE .)
    WS              reduce using rule 18 (stmt -> fragment NEWLINE .)
    STRING_START_SINGLE reduce using rule 18 (stmt -> fragment NEWLINE .)
    NUMBER          reduce using rule 18 (stmt -> fragment NEWLINE .)
    NAME            reduce using rule 18 (stmt -> fragment NEWLINE .)
    LPAR            reduce using rule 18 (stmt -> fragment NEWLINE .)
    RPAR            reduce using rule 18 (stmt -> fragment NEWLINE .)
    LSQB            reduce using rule 18 (stmt -> fragment NEWLINE .)
    RSQB            reduce using rule 18 (stmt -> fragment NEWLINE .)
    COLON           reduce using rule 18 (stmt -> fragment NEWLINE .)
    OPERATOR        reduce using rule 18 (stmt -> fragment NEWLINE .)
    COMMENT         reduce using rule 18 (stmt -> fragment NEWLINE .)
    RANGE           reduce using rule 18 (stmt -> fragment NEWLINE .)
    CLASS           reduce using rule 18 (stmt -> fragment NEWLINE .)
    DEF             reduce using rule 18 (stmt -> fragment NEWLINE .)
    IF              reduce using rule 18 (stmt -> fragment NEWLINE .)
    ELIF            reduce using rule 18 (stmt -> fragment NEWLINE .)
    ELSE            reduce using rule 18 (stmt -> fragment NEWLINE .)
    TRY             reduce using rule 18 (stmt -> fragment NEWLINE .)
    EXCEPT          reduce using rule 18 (stmt -> fragment NEWLINE .)
    FINALLY         reduce using rule 18 (stmt -> fragment NEWLINE .)
    WITH            reduce using rule 18 (stmt -> fragment NEWLINE .)
    WHILE           reduce using rule 18 (stmt -> fragment NEWLINE .)
    FOR             reduce using rule 18 (stmt -> fragment NEWLINE .)
    ENDMARKER       reduce using rule 18 (stmt -> fragment NEWLINE .)


state 46

    (37) fragment -> fragment COLON .

    NEWLINE         reduce using rule 37 (fragment -> fragment COLON .)
    LBRACE          reduce using rule 37 (fragment -> fragment COLON .)
    RBRACE          reduce using rule 37 (fragment -> fragment COLON .)
    STRING_END      reduce using rule 37 (fragment -> fragment COLON .)
    STRING_CONTINUE reduce using rule 37 (fragment -> fragment COLON .)
    STRING          reduce using rule 37 (fragment -> fragment COLON .)
    STRING_START_TRIPLE reduce using rule 37 (fragment -> fragment COLON .)
    WS              reduce using rule 37 (fragment -> fragment COLON .)
    STRING_START_SINGLE reduce using rule 37 (fragment -> fragment COLON .)
    NUMBER          reduce using rule 37 (fragment -> fragment COLON .)
    NAME            reduce using rule 37 (fragment -> fragment COLON .)
    LPAR            reduce using rule 37 (fragment -> fragment COLON .)
    RPAR            reduce using rule 37 (fragment -> fragment COLON .)
    OPERATOR        reduce using rule 37 (fragment -> fragment COLON .)
    LSQB            reduce using rule 37 (fragment -> fragment COLON .)
    RSQB            reduce using rule 37 (fragment -> fragment COLON .)
    COLON           reduce using rule 37 (fragment -> fragment COLON .)
    PERIOD          reduce using rule 37 (fragment -> fragment COLON .)
    RANGE           reduce using rule 37 (fragment -> fragment COLON .)
    CLASS           reduce using rule 37 (fragment -> fragment COLON .)
    DEF             reduce using rule 37 (fragment -> fragment COLON .)
    IF              reduce using rule 37 (fragment -> fragment COLON .)
    ELIF            reduce using rule 37 (fragment -> fragment COLON .)
    ELSE            reduce using rule 37 (fragment -> fragment COLON .)
    TRY             reduce using rule 37 (fragment -> fragment COLON .)
    EXCEPT          reduce using rule 37 (fragment -> fragment COLON .)
    FINALLY         reduce using rule 37 (fragment -> fragment COLON .)
    WITH            reduce using rule 37 (fragment -> fragment COLON .)
    WHILE           reduce using rule 37 (fragment -> fragment COLON .)
    FOR             reduce using rule 37 (fragment -> fragment COLON .)
    COMMENT         reduce using rule 37 (fragment -> fragment COLON .)
    ENDMARKER       reduce using rule 37 (fragment -> fragment COLON .)
    DEDENT          reduce using rule 37 (fragment -> fragment COLON .)


state 47

    (24) fragment -> fragment STRING_END .

    NEWLINE         reduce using rule 24 (fragment -> fragment STRING_END .)
    LBRACE          reduce using rule 24 (fragment -> fragment STRING_END .)
    RBRACE          reduce using rule 24 (fragment -> fragment STRING_END .)
    STRING_END      reduce using rule 24 (fragment -> fragment STRING_END .)
    STRING_CONTINUE reduce using rule 24 (fragment -> fragment STRING_END .)
    STRING          reduce using rule 24 (fragment -> fragment STRING_END .)
    STRING_START_TRIPLE reduce using rule 24 (fragment -> fragment STRING_END .)
    WS              reduce using rule 24 (fragment -> fragment STRING_END .)
    STRING_START_SINGLE reduce using rule 24 (fragment -> fragment STRING_END .)
    NUMBER          reduce using rule 24 (fragment -> fragment STRING_END .)
    NAME            reduce using rule 24 (fragment -> fragment STRING_END .)
    LPAR            reduce using rule 24 (fragment -> fragment STRING_END .)
    RPAR            reduce using rule 24 (fragment -> fragment STRING_END .)
    OPERATOR        reduce using rule 24 (fragment -> fragment STRING_END .)
    LSQB            reduce using rule 24 (fragment -> fragment STRING_END .)
    RSQB            reduce using rule 24 (fragment -> fragment STRING_END .)
    COLON           reduce using rule 24 (fragment -> fragment STRING_END .)
    PERIOD          reduce using rule 24 (fragment -> fragment STRING_END .)
    RANGE           reduce using rule 24 (fragment -> fragment STRING_END .)
    CLASS           reduce using rule 24 (fragment -> fragment STRING_END .)
    DEF             reduce using rule 24 (fragment -> fragment STRING_END .)
    IF              reduce using rule 24 (fragment -> fragment STRING_END .)
    ELIF            reduce using rule 24 (fragment -> fragment STRING_END .)
    ELSE            reduce using rule 24 (fragment -> fragment STRING_END .)
    TRY             reduce using rule 24 (fragment -> fragment STRING_END .)
    EXCEPT          reduce using rule 24 (fragment -> fragment STRING_END .)
    FINALLY         reduce using rule 24 (fragment -> fragment STRING_END .)
    WITH            reduce using rule 24 (fragment -> fragment STRING_END .)
    WHILE           reduce using rule 24 (fragment -> fragment STRING_END .)
    FOR             reduce using rule 24 (fragment -> fragment STRING_END .)
    COMMENT         reduce using rule 24 (fragment -> fragment STRING_END .)
    ENDMARKER       reduce using rule 24 (fragment -> fragment STRING_END .)
    DEDENT          reduce using rule 24 (fragment -> fragment STRING_END .)


state 48

    (36) fragment -> fragment RSQB .

    NEWLINE         reduce using rule 36 (fragment -> fragment RSQB .)
    LBRACE          reduce using rule 36 (fragment -> fragment RSQB .)
    RBRACE          reduce using rule 36 (fragment -> fragment RSQB .)
    STRING_END      reduce using rule 36 (fragment -> fragment RSQB .)
    STRING_CONTINUE reduce using rule 36 (fragment -> fragment RSQB .)
    STRING          reduce using rule 36 (fragment -> fragment RSQB .)
    STRING_START_TRIPLE reduce using rule 36 (fragment -> fragment RSQB .)
    WS              reduce using rule 36 (fragment -> fragment RSQB .)
    STRING_START_SINGLE reduce using rule 36 (fragment -> fragment RSQB .)
    NUMBER          reduce using rule 36 (fragment -> fragment RSQB .)
    NAME            reduce using rule 36 (fragment -> fragment RSQB .)
    LPAR            reduce using rule 36 (fragment -> fragment RSQB .)
    RPAR            reduce using rule 36 (fragment -> fragment RSQB .)
    OPERATOR        reduce using rule 36 (fragment -> fragment RSQB .)
    LSQB            reduce using rule 36 (fragment -> fragment RSQB .)
    RSQB            reduce using rule 36 (fragment -> fragment RSQB .)
    COLON           reduce using rule 36 (fragment -> fragment RSQB .)
    PERIOD          reduce using rule 36 (fragment -> fragment RSQB .)
    RANGE           reduce using rule 36 (fragment -> fragment RSQB .)
    CLASS           reduce using rule 36 (fragment -> fragment RSQB .)
    DEF             reduce using rule 36 (fragment -> fragment RSQB .)
    IF              reduce using rule 36 (fragment -> fragment RSQB .)
    ELIF            reduce using rule 36 (fragment -> fragment RSQB .)
    ELSE            reduce using rule 36 (fragment -> fragment RSQB .)
    TRY             reduce using rule 36 (fragment -> fragment RSQB .)
    EXCEPT          reduce using rule 36 (fragment -> fragment RSQB .)
    FINALLY         reduce using rule 36 (fragment -> fragment RSQB .)
    WITH            reduce using rule 36 (fragment -> fragment RSQB .)
    WHILE           reduce using rule 36 (fragment -> fragment RSQB .)
    FOR             reduce using rule 36 (fragment -> fragment RSQB .)
    COMMENT         reduce using rule 36 (fragment -> fragment RSQB .)
    ENDMARKER       reduce using rule 36 (fragment -> fragment RSQB .)
    DEDENT          reduce using rule 36 (fragment -> fragment RSQB .)


state 49

    (23) fragment -> fragment RBRACE .

    NEWLINE         reduce using rule 23 (fragment -> fragment RBRACE .)
    LBRACE          reduce using rule 23 (fragment -> fragment RBRACE .)
    RBRACE          reduce using rule 23 (fragment -> fragment RBRACE .)
    STRING_END      reduce using rule 23 (fragment -> fragment RBRACE .)
    STRING_CONTINUE reduce using rule 23 (fragment -> fragment RBRACE .)
    STRING          reduce using rule 23 (fragment -> fragment RBRACE .)
    STRING_START_TRIPLE reduce using rule 23 (fragment -> fragment RBRACE .)
    WS              reduce using rule 23 (fragment -> fragment RBRACE .)
    STRING_START_SINGLE reduce using rule 23 (fragment -> fragment RBRACE .)
    NUMBER          reduce using rule 23 (fragment -> fragment RBRACE .)
    NAME            reduce using rule 23 (fragment -> fragment RBRACE .)
    LPAR            reduce using rule 23 (fragment -> fragment RBRACE .)
    RPAR            reduce using rule 23 (fragment -> fragment RBRACE .)
    OPERATOR        reduce using rule 23 (fragment -> fragment RBRACE .)
    LSQB            reduce using rule 23 (fragment -> fragment RBRACE .)
    RSQB            reduce using rule 23 (fragment -> fragment RBRACE .)
    COLON           reduce using rule 23 (fragment -> fragment RBRACE .)
    PERIOD          reduce using rule 23 (fragment -> fragment RBRACE .)
    RANGE           reduce using rule 23 (fragment -> fragment RBRACE .)
    CLASS           reduce using rule 23 (fragment -> fragment RBRACE .)
    DEF             reduce using rule 23 (fragment -> fragment RBRACE .)
    IF              reduce using rule 23 (fragment -> fragment RBRACE .)
    ELIF            reduce using rule 23 (fragment -> fragment RBRACE .)
    ELSE            reduce using rule 23 (fragment -> fragment RBRACE .)
    TRY             reduce using rule 23 (fragment -> fragment RBRACE .)
    EXCEPT          reduce using rule 23 (fragment -> fragment RBRACE .)
    FINALLY         reduce using rule 23 (fragment -> fragment RBRACE .)
    WITH            reduce using rule 23 (fragment -> fragment RBRACE .)
    WHILE           reduce using rule 23 (fragment -> fragment RBRACE .)
    FOR             reduce using rule 23 (fragment -> fragment RBRACE .)
    COMMENT         reduce using rule 23 (fragment -> fragment RBRACE .)
    ENDMARKER       reduce using rule 23 (fragment -> fragment RBRACE .)
    DEDENT          reduce using rule 23 (fragment -> fragment RBRACE .)


state 50

    (39) fragment -> fragment PERIOD .

    NEWLINE         reduce using rule 39 (fragment -> fragment PERIOD .)
    LBRACE          reduce using rule 39 (fragment -> fragment PERIOD .)
    RBRACE          reduce using rule 39 (fragment -> fragment PERIOD .)
    STRING_END      reduce using rule 39 (fragment -> fragment PERIOD .)
    STRING_CONTINUE reduce using rule 39 (fragment -> fragment PERIOD .)
    STRING          reduce using rule 39 (fragment -> fragment PERIOD .)
    STRING_START_TRIPLE reduce using rule 39 (fragment -> fragment PERIOD .)
    WS              reduce using rule 39 (fragment -> fragment PERIOD .)
    STRING_START_SINGLE reduce using rule 39 (fragment -> fragment PERIOD .)
    NUMBER          reduce using rule 39 (fragment -> fragment PERIOD .)
    NAME            reduce using rule 39 (fragment -> fragment PERIOD .)
    LPAR            reduce using rule 39 (fragment -> fragment PERIOD .)
    RPAR            reduce using rule 39 (fragment -> fragment PERIOD .)
    OPERATOR        reduce using rule 39 (fragment -> fragment PERIOD .)
    LSQB            reduce using rule 39 (fragment -> fragment PERIOD .)
    RSQB            reduce using rule 39 (fragment -> fragment PERIOD .)
    COLON           reduce using rule 39 (fragment -> fragment PERIOD .)
    PERIOD          reduce using rule 39 (fragment -> fragment PERIOD .)
    RANGE           reduce using rule 39 (fragment -> fragment PERIOD .)
    CLASS           reduce using rule 39 (fragment -> fragment PERIOD .)
    DEF             reduce using rule 39 (fragment -> fragment PERIOD .)
    IF              reduce using rule 39 (fragment -> fragment PERIOD .)
    ELIF            reduce using rule 39 (fragment -> fragment PERIOD .)
    ELSE            reduce using rule 39 (fragment -> fragment PERIOD .)
    TRY             reduce using rule 39 (fragment -> fragment PERIOD .)
    EXCEPT          reduce using rule 39 (fragment -> fragment PERIOD .)
    FINALLY         reduce using rule 39 (fragment -> fragment PERIOD .)
    WITH            reduce using rule 39 (fragment -> fragment PERIOD .)
    WHILE           reduce using rule 39 (fragment -> fragment PERIOD .)
    FOR             reduce using rule 39 (fragment -> fragment PERIOD .)
    COMMENT         reduce using rule 39 (fragment -> fragment PERIOD .)
    ENDMARKER       reduce using rule 39 (fragment -> fragment PERIOD .)
    DEDENT          reduce using rule 39 (fragment -> fragment PERIOD .)


state 51

    (29) fragment -> fragment STRING_START_SINGLE .

    NEWLINE         reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    LBRACE          reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    RBRACE          reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    STRING_END      reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    STRING_CONTINUE reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    STRING          reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    STRING_START_TRIPLE reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    WS              reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    STRING_START_SINGLE reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    NUMBER          reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    NAME            reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    LPAR            reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    RPAR            reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    OPERATOR        reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    LSQB            reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    RSQB            reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    COLON           reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    PERIOD          reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    RANGE           reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    CLASS           reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    DEF             reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    IF              reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    ELIF            reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    ELSE            reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    TRY             reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    EXCEPT          reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    FINALLY         reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    WITH            reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    WHILE           reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    FOR             reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    COMMENT         reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    ENDMARKER       reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)
    DEDENT          reduce using rule 29 (fragment -> fragment STRING_START_SINGLE .)


state 52

    (40) fragment -> fragment RANGE .

    NEWLINE         reduce using rule 40 (fragment -> fragment RANGE .)
    LBRACE          reduce using rule 40 (fragment -> fragment RANGE .)
    RBRACE          reduce using rule 40 (fragment -> fragment RANGE .)
    STRING_END      reduce using rule 40 (fragment -> fragment RANGE .)
    STRING_CONTINUE reduce using rule 40 (fragment -> fragment RANGE .)
    STRING          reduce using rule 40 (fragment -> fragment RANGE .)
    STRING_START_TRIPLE reduce using rule 40 (fragment -> fragment RANGE .)
    WS              reduce using rule 40 (fragment -> fragment RANGE .)
    STRING_START_SINGLE reduce using rule 40 (fragment -> fragment RANGE .)
    NUMBER          reduce using rule 40 (fragment -> fragment RANGE .)
    NAME            reduce using rule 40 (fragment -> fragment RANGE .)
    LPAR            reduce using rule 40 (fragment -> fragment RANGE .)
    RPAR            reduce using rule 40 (fragment -> fragment RANGE .)
    OPERATOR        reduce using rule 40 (fragment -> fragment RANGE .)
    LSQB            reduce using rule 40 (fragment -> fragment RANGE .)
    RSQB            reduce using rule 40 (fragment -> fragment RANGE .)
    COLON           reduce using rule 40 (fragment -> fragment RANGE .)
    PERIOD          reduce using rule 40 (fragment -> fragment RANGE .)
    RANGE           reduce using rule 40 (fragment -> fragment RANGE .)
    CLASS           reduce using rule 40 (fragment -> fragment RANGE .)
    DEF             reduce using rule 40 (fragment -> fragment RANGE .)
    IF              reduce using rule 40 (fragment -> fragment RANGE .)
    ELIF            reduce using rule 40 (fragment -> fragment RANGE .)
    ELSE            reduce using rule 40 (fragment -> fragment RANGE .)
    TRY             reduce using rule 40 (fragment -> fragment RANGE .)
    EXCEPT          reduce using rule 40 (fragment -> fragment RANGE .)
    FINALLY         reduce using rule 40 (fragment -> fragment RANGE .)
    WITH            reduce using rule 40 (fragment -> fragment RANGE .)
    WHILE           reduce using rule 40 (fragment -> fragment RANGE .)
    FOR             reduce using rule 40 (fragment -> fragment RANGE .)
    COMMENT         reduce using rule 40 (fragment -> fragment RANGE .)
    ENDMARKER       reduce using rule 40 (fragment -> fragment RANGE .)
    DEDENT          reduce using rule 40 (fragment -> fragment RANGE .)


state 53

    (38) fragment -> fragment block_keyword .

    NEWLINE         reduce using rule 38 (fragment -> fragment block_keyword .)
    LBRACE          reduce using rule 38 (fragment -> fragment block_keyword .)
    RBRACE          reduce using rule 38 (fragment -> fragment block_keyword .)
    STRING_END      reduce using rule 38 (fragment -> fragment block_keyword .)
    STRING_CONTINUE reduce using rule 38 (fragment -> fragment block_keyword .)
    STRING          reduce using rule 38 (fragment -> fragment block_keyword .)
    STRING_START_TRIPLE reduce using rule 38 (fragment -> fragment block_keyword .)
    WS              reduce using rule 38 (fragment -> fragment block_keyword .)
    STRING_START_SINGLE reduce using rule 38 (fragment -> fragment block_keyword .)
    NUMBER          reduce using rule 38 (fragment -> fragment block_keyword .)
    NAME            reduce using rule 38 (fragment -> fragment block_keyword .)
    LPAR            reduce using rule 38 (fragment -> fragment block_keyword .)
    RPAR            reduce using rule 38 (fragment -> fragment block_keyword .)
    OPERATOR        reduce using rule 38 (fragment -> fragment block_keyword .)
    LSQB            reduce using rule 38 (fragment -> fragment block_keyword .)
    RSQB            reduce using rule 38 (fragment -> fragment block_keyword .)
    COLON           reduce using rule 38 (fragment -> fragment block_keyword .)
    PERIOD          reduce using rule 38 (fragment -> fragment block_keyword .)
    RANGE           reduce using rule 38 (fragment -> fragment block_keyword .)
    CLASS           reduce using rule 38 (fragment -> fragment block_keyword .)
    DEF             reduce using rule 38 (fragment -> fragment block_keyword .)
    IF              reduce using rule 38 (fragment -> fragment block_keyword .)
    ELIF            reduce using rule 38 (fragment -> fragment block_keyword .)
    ELSE            reduce using rule 38 (fragment -> fragment block_keyword .)
    TRY             reduce using rule 38 (fragment -> fragment block_keyword .)
    EXCEPT          reduce using rule 38 (fragment -> fragment block_keyword .)
    FINALLY         reduce using rule 38 (fragment -> fragment block_keyword .)
    WITH            reduce using rule 38 (fragment -> fragment block_keyword .)
    WHILE           reduce using rule 38 (fragment -> fragment block_keyword .)
    FOR             reduce using rule 38 (fragment -> fragment block_keyword .)
    COMMENT         reduce using rule 38 (fragment -> fragment block_keyword .)
    ENDMARKER       reduce using rule 38 (fragment -> fragment block_keyword .)
    DEDENT          reduce using rule 38 (fragment -> fragment block_keyword .)


state 54

    (34) fragment -> fragment OPERATOR .

    NEWLINE         reduce using rule 34 (fragment -> fragment OPERATOR .)
    LBRACE          reduce using rule 34 (fragment -> fragment OPERATOR .)
    RBRACE          reduce using rule 34 (fragment -> fragment OPERATOR .)
    STRING_END      reduce using rule 34 (fragment -> fragment OPERATOR .)
    STRING_CONTINUE reduce using rule 34 (fragment -> fragment OPERATOR .)
    STRING          reduce using rule 34 (fragment -> fragment OPERATOR .)
    STRING_START_TRIPLE reduce using rule 34 (fragment -> fragment OPERATOR .)
    WS              reduce using rule 34 (fragment -> fragment OPERATOR .)
    STRING_START_SINGLE reduce using rule 34 (fragment -> fragment OPERATOR .)
    NUMBER          reduce using rule 34 (fragment -> fragment OPERATOR .)
    NAME            reduce using rule 34 (fragment -> fragment OPERATOR .)
    LPAR            reduce using rule 34 (fragment -> fragment OPERATOR .)
    RPAR            reduce using rule 34 (fragment -> fragment OPERATOR .)
    OPERATOR        reduce using rule 34 (fragment -> fragment OPERATOR .)
    LSQB            reduce using rule 34 (fragment -> fragment OPERATOR .)
    RSQB            reduce using rule 34 (fragment -> fragment OPERATOR .)
    COLON           reduce using rule 34 (fragment -> fragment OPERATOR .)
    PERIOD          reduce using rule 34 (fragment -> fragment OPERATOR .)
    RANGE           reduce using rule 34 (fragment -> fragment OPERATOR .)
    CLASS           reduce using rule 34 (fragment -> fragment OPERATOR .)
    DEF             reduce using rule 34 (fragment -> fragment OPERATOR .)
    IF              reduce using rule 34 (fragment -> fragment OPERATOR .)
    ELIF            reduce using rule 34 (fragment -> fragment OPERATOR .)
    ELSE            reduce using rule 34 (fragment -> fragment OPERATOR .)
    TRY             reduce using rule 34 (fragment -> fragment OPERATOR .)
    EXCEPT          reduce using rule 34 (fragment -> fragment OPERATOR .)
    FINALLY         reduce using rule 34 (fragment -> fragment OPERATOR .)
    WITH            reduce using rule 34 (fragment -> fragment OPERATOR .)
    WHILE           reduce using rule 34 (fragment -> fragment OPERATOR .)
    FOR             reduce using rule 34 (fragment -> fragment OPERATOR .)
    COMMENT         reduce using rule 34 (fragment -> fragment OPERATOR .)
    ENDMARKER       reduce using rule 34 (fragment -> fragment OPERATOR .)
    DEDENT          reduce using rule 34 (fragment -> fragment OPERATOR .)


state 55

    (35) fragment -> fragment LSQB .

    NEWLINE         reduce using rule 35 (fragment -> fragment LSQB .)
    LBRACE          reduce using rule 35 (fragment -> fragment LSQB .)
    RBRACE          reduce using rule 35 (fragment -> fragment LSQB .)
    STRING_END      reduce using rule 35 (fragment -> fragment LSQB .)
    STRING_CONTINUE reduce using rule 35 (fragment -> fragment LSQB .)
    STRING          reduce using rule 35 (fragment -> fragment LSQB .)
    STRING_START_TRIPLE reduce using rule 35 (fragment -> fragment LSQB .)
    WS              reduce using rule 35 (fragment -> fragment LSQB .)
    STRING_START_SINGLE reduce using rule 35 (fragment -> fragment LSQB .)
    NUMBER          reduce using rule 35 (fragment -> fragment LSQB .)
    NAME            reduce using rule 35 (fragment -> fragment LSQB .)
    LPAR            reduce using rule 35 (fragment -> fragment LSQB .)
    RPAR            reduce using rule 35 (fragment -> fragment LSQB .)
    OPERATOR        reduce using rule 35 (fragment -> fragment LSQB .)
    LSQB            reduce using rule 35 (fragment -> fragment LSQB .)
    RSQB            reduce using rule 35 (fragment -> fragment LSQB .)
    COLON           reduce using rule 35 (fragment -> fragment LSQB .)
    PERIOD          reduce using rule 35 (fragment -> fragment LSQB .)
    RANGE           reduce using rule 35 (fragment -> fragment LSQB .)
    CLASS           reduce using rule 35 (fragment -> fragment LSQB .)
    DEF             reduce using rule 35 (fragment -> fragment LSQB .)
    IF              reduce using rule 35 (fragment -> fragment LSQB .)
    ELIF            reduce using rule 35 (fragment -> fragment LSQB .)
    ELSE            reduce using rule 35 (fragment -> fragment LSQB .)
    TRY             reduce using rule 35 (fragment -> fragment LSQB .)
    EXCEPT          reduce using rule 35 (fragment -> fragment LSQB .)
    FINALLY         reduce using rule 35 (fragment -> fragment LSQB .)
    WITH            reduce using rule 35 (fragment -> fragment LSQB .)
    WHILE           reduce using rule 35 (fragment -> fragment LSQB .)
    FOR             reduce using rule 35 (fragment -> fragment LSQB .)
    COMMENT         reduce using rule 35 (fragment -> fragment LSQB .)
    ENDMARKER       reduce using rule 35 (fragment -> fragment LSQB .)
    DEDENT          reduce using rule 35 (fragment -> fragment LSQB .)


state 56

    (22) fragment -> fragment LBRACE .

    NEWLINE         reduce using rule 22 (fragment -> fragment LBRACE .)
    LBRACE          reduce using rule 22 (fragment -> fragment LBRACE .)
    RBRACE          reduce using rule 22 (fragment -> fragment LBRACE .)
    STRING_END      reduce using rule 22 (fragment -> fragment LBRACE .)
    STRING_CONTINUE reduce using rule 22 (fragment -> fragment LBRACE .)
    STRING          reduce using rule 22 (fragment -> fragment LBRACE .)
    STRING_START_TRIPLE reduce using rule 22 (fragment -> fragment LBRACE .)
    WS              reduce using rule 22 (fragment -> fragment LBRACE .)
    STRING_START_SINGLE reduce using rule 22 (fragment -> fragment LBRACE .)
    NUMBER          reduce using rule 22 (fragment -> fragment LBRACE .)
    NAME            reduce using rule 22 (fragment -> fragment LBRACE .)
    LPAR            reduce using rule 22 (fragment -> fragment LBRACE .)
    RPAR            reduce using rule 22 (fragment -> fragment LBRACE .)
    OPERATOR        reduce using rule 22 (fragment -> fragment LBRACE .)
    LSQB            reduce using rule 22 (fragment -> fragment LBRACE .)
    RSQB            reduce using rule 22 (fragment -> fragment LBRACE .)
    COLON           reduce using rule 22 (fragment -> fragment LBRACE .)
    PERIOD          reduce using rule 22 (fragment -> fragment LBRACE .)
    RANGE           reduce using rule 22 (fragment -> fragment LBRACE .)
    CLASS           reduce using rule 22 (fragment -> fragment LBRACE .)
    DEF             reduce using rule 22 (fragment -> fragment LBRACE .)
    IF              reduce using rule 22 (fragment -> fragment LBRACE .)
    ELIF            reduce using rule 22 (fragment -> fragment LBRACE .)
    ELSE            reduce using rule 22 (fragment -> fragment LBRACE .)
    TRY             reduce using rule 22 (fragment -> fragment LBRACE .)
    EXCEPT          reduce using rule 22 (fragment -> fragment LBRACE .)
    FINALLY         reduce using rule 22 (fragment -> fragment LBRACE .)
    WITH            reduce using rule 22 (fragment -> fragment LBRACE .)
    WHILE           reduce using rule 22 (fragment -> fragment LBRACE .)
    FOR             reduce using rule 22 (fragment -> fragment LBRACE .)
    COMMENT         reduce using rule 22 (fragment -> fragment LBRACE .)
    ENDMARKER       reduce using rule 22 (fragment -> fragment LBRACE .)
    DEDENT          reduce using rule 22 (fragment -> fragment LBRACE .)


state 57

    (31) fragment -> fragment NAME .

    NEWLINE         reduce using rule 31 (fragment -> fragment NAME .)
    LBRACE          reduce using rule 31 (fragment -> fragment NAME .)
    RBRACE          reduce using rule 31 (fragment -> fragment NAME .)
    STRING_END      reduce using rule 31 (fragment -> fragment NAME .)
    STRING_CONTINUE reduce using rule 31 (fragment -> fragment NAME .)
    STRING          reduce using rule 31 (fragment -> fragment NAME .)
    STRING_START_TRIPLE reduce using rule 31 (fragment -> fragment NAME .)
    WS              reduce using rule 31 (fragment -> fragment NAME .)
    STRING_START_SINGLE reduce using rule 31 (fragment -> fragment NAME .)
    NUMBER          reduce using rule 31 (fragment -> fragment NAME .)
    NAME            reduce using rule 31 (fragment -> fragment NAME .)
    LPAR            reduce using rule 31 (fragment -> fragment NAME .)
    RPAR            reduce using rule 31 (fragment -> fragment NAME .)
    OPERATOR        reduce using rule 31 (fragment -> fragment NAME .)
    LSQB            reduce using rule 31 (fragment -> fragment NAME .)
    RSQB            reduce using rule 31 (fragment -> fragment NAME .)
    COLON           reduce using rule 31 (fragment -> fragment NAME .)
    PERIOD          reduce using rule 31 (fragment -> fragment NAME .)
    RANGE           reduce using rule 31 (fragment -> fragment NAME .)
    CLASS           reduce using rule 31 (fragment -> fragment NAME .)
    DEF             reduce using rule 31 (fragment -> fragment NAME .)
    IF              reduce using rule 31 (fragment -> fragment NAME .)
    ELIF            reduce using rule 31 (fragment -> fragment NAME .)
    ELSE            reduce using rule 31 (fragment -> fragment NAME .)
    TRY             reduce using rule 31 (fragment -> fragment NAME .)
    EXCEPT          reduce using rule 31 (fragment -> fragment NAME .)
    FINALLY         reduce using rule 31 (fragment -> fragment NAME .)
    WITH            reduce using rule 31 (fragment -> fragment NAME .)
    WHILE           reduce using rule 31 (fragment -> fragment NAME .)
    FOR             reduce using rule 31 (fragment -> fragment NAME .)
    COMMENT         reduce using rule 31 (fragment -> fragment NAME .)
    ENDMARKER       reduce using rule 31 (fragment -> fragment NAME .)
    DEDENT          reduce using rule 31 (fragment -> fragment NAME .)


state 58

    (25) fragment -> fragment STRING_CONTINUE .

    NEWLINE         reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    LBRACE          reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    RBRACE          reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    STRING_END      reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    STRING_CONTINUE reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    STRING          reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    STRING_START_TRIPLE reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    WS              reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    STRING_START_SINGLE reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    NUMBER          reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    NAME            reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    LPAR            reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    RPAR            reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    OPERATOR        reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    LSQB            reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    RSQB            reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    COLON           reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    PERIOD          reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    RANGE           reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    CLASS           reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    DEF             reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    IF              reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    ELIF            reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    ELSE            reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    TRY             reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    EXCEPT          reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    FINALLY         reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    WITH            reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    WHILE           reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    FOR             reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    COMMENT         reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    ENDMARKER       reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)
    DEDENT          reduce using rule 25 (fragment -> fragment STRING_CONTINUE .)


state 59

    (2) block -> block_keyword fragment . COLON NEWLINE INDENT suite DEDENT
    (3) block -> block_keyword fragment . COLON suite
    (4) block -> block_keyword fragment . COLON NEWLINE
    (22) fragment -> fragment . LBRACE
    (23) fragment -> fragment . RBRACE
    (24) fragment -> fragment . STRING_END
    (25) fragment -> fragment . STRING_CONTINUE
    (26) fragment -> fragment . STRING
    (27) fragment -> fragment . STRING_START_TRIPLE
    (28) fragment -> fragment . WS
    (29) fragment -> fragment . STRING_START_SINGLE
    (30) fragment -> fragment . NUMBER
    (31) fragment -> fragment . NAME
    (32) fragment -> fragment . LPAR
    (33) fragment -> fragment . RPAR
    (34) fragment -> fragment . OPERATOR
    (35) fragment -> fragment . LSQB
    (36) fragment -> fragment . RSQB
    (37) fragment -> fragment . COLON
    (38) fragment -> fragment . block_keyword
    (39) fragment -> fragment . PERIOD
    (40) fragment -> fragment . RANGE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

    COLON           shift and go to state 61
    LBRACE          shift and go to state 56
    RBRACE          shift and go to state 49
    STRING_END      shift and go to state 47
    STRING_CONTINUE shift and go to state 58
    STRING          shift and go to state 44
    STRING_START_TRIPLE shift and go to state 40
    WS              shift and go to state 43
    STRING_START_SINGLE shift and go to state 51
    NUMBER          shift and go to state 41
    NAME            shift and go to state 57
    LPAR            shift and go to state 39
    RPAR            shift and go to state 42
    OPERATOR        shift and go to state 54
    LSQB            shift and go to state 55
    RSQB            shift and go to state 48
    PERIOD          shift and go to state 50
    RANGE           shift and go to state 52
    CLASS           shift and go to state 18
    DEF             shift and go to state 8
    IF              shift and go to state 30
    ELIF            shift and go to state 13
    ELSE            shift and go to state 23
    TRY             shift and go to state 24
    EXCEPT          shift and go to state 12
    FINALLY         shift and go to state 34
    WITH            shift and go to state 7
    WHILE           shift and go to state 5
    FOR             shift and go to state 20

    block_keyword                  shift and go to state 53

state 60

    (41) fragment -> block_keyword .

    COLON           reduce using rule 41 (fragment -> block_keyword .)
    LBRACE          reduce using rule 41 (fragment -> block_keyword .)
    RBRACE          reduce using rule 41 (fragment -> block_keyword .)
    STRING_END      reduce using rule 41 (fragment -> block_keyword .)
    STRING_CONTINUE reduce using rule 41 (fragment -> block_keyword .)
    STRING          reduce using rule 41 (fragment -> block_keyword .)
    STRING_START_TRIPLE reduce using rule 41 (fragment -> block_keyword .)
    WS              reduce using rule 41 (fragment -> block_keyword .)
    STRING_START_SINGLE reduce using rule 41 (fragment -> block_keyword .)
    NUMBER          reduce using rule 41 (fragment -> block_keyword .)
    NAME            reduce using rule 41 (fragment -> block_keyword .)
    LPAR            reduce using rule 41 (fragment -> block_keyword .)
    RPAR            reduce using rule 41 (fragment -> block_keyword .)
    OPERATOR        reduce using rule 41 (fragment -> block_keyword .)
    LSQB            reduce using rule 41 (fragment -> block_keyword .)
    RSQB            reduce using rule 41 (fragment -> block_keyword .)
    PERIOD          reduce using rule 41 (fragment -> block_keyword .)
    RANGE           reduce using rule 41 (fragment -> block_keyword .)
    CLASS           reduce using rule 41 (fragment -> block_keyword .)
    DEF             reduce using rule 41 (fragment -> block_keyword .)
    IF              reduce using rule 41 (fragment -> block_keyword .)
    ELIF            reduce using rule 41 (fragment -> block_keyword .)
    ELSE            reduce using rule 41 (fragment -> block_keyword .)
    TRY             reduce using rule 41 (fragment -> block_keyword .)
    EXCEPT          reduce using rule 41 (fragment -> block_keyword .)
    FINALLY         reduce using rule 41 (fragment -> block_keyword .)
    WITH            reduce using rule 41 (fragment -> block_keyword .)
    WHILE           reduce using rule 41 (fragment -> block_keyword .)
    FOR             reduce using rule 41 (fragment -> block_keyword .)


state 61

    (2) block -> block_keyword fragment COLON . NEWLINE INDENT suite DEDENT
    (3) block -> block_keyword fragment COLON . suite
    (4) block -> block_keyword fragment COLON . NEWLINE
    (37) fragment -> fragment COLON .
    (16) suite -> . stmt
    (17) suite -> . suite stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment
    (20) stmt -> . NEWLINE
    (21) stmt -> . block
    (22) fragment -> . fragment LBRACE
    (23) fragment -> . fragment RBRACE
    (24) fragment -> . fragment STRING_END
    (25) fragment -> . fragment STRING_CONTINUE
    (26) fragment -> . fragment STRING
    (27) fragment -> . fragment STRING_START_TRIPLE
    (28) fragment -> . fragment WS
    (29) fragment -> . fragment STRING_START_SINGLE
    (30) fragment -> . fragment NUMBER
    (31) fragment -> . fragment NAME
    (32) fragment -> . fragment LPAR
    (33) fragment -> . fragment RPAR
    (34) fragment -> . fragment OPERATOR
    (35) fragment -> . fragment LSQB
    (36) fragment -> . fragment RSQB
    (37) fragment -> . fragment COLON
    (38) fragment -> . fragment block_keyword
    (39) fragment -> . fragment PERIOD
    (40) fragment -> . fragment RANGE
    (41) fragment -> . block_keyword
    (42) fragment -> . LBRACE
    (43) fragment -> . RBRACE
    (44) fragment -> . STRING_END
    (45) fragment -> . STRING_CONTINUE
    (46) fragment -> . STRING
    (47) fragment -> . STRING_START_TRIPLE
    (48) fragment -> . WS
    (49) fragment -> . STRING_START_SINGLE
    (50) fragment -> . NUMBER
    (51) fragment -> . NAME
    (52) fragment -> . LPAR
    (53) fragment -> . RPAR
    (54) fragment -> . LSQB
    (55) fragment -> . RSQB
    (56) fragment -> . COLON
    (57) fragment -> . OPERATOR
    (58) fragment -> . COMMENT
    (59) fragment -> . RANGE
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for STRING_END resolved as shift
  ! shift/reduce conflict for STRING_CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for STRING_START_TRIPLE resolved as shift
  ! shift/reduce conflict for WS resolved as shift
  ! shift/reduce conflict for STRING_START_SINGLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for RPAR resolved as shift
  ! shift/reduce conflict for LSQB resolved as shift
  ! shift/reduce conflict for RSQB resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for EXCEPT resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    NEWLINE         shift and go to state 62
    PERIOD          reduce using rule 37 (fragment -> fragment COLON .)
    LBRACE          shift and go to state 31
    RBRACE          shift and go to state 19
    STRING_END      shift and go to state 16
    STRING_CONTINUE shift and go to state 35
    STRING          shift and go to state 9
    STRING_START_TRIPLE shift and go to state 2
    WS              shift and go to state 6
    STRING_START_SINGLE shift and go to state 26
    NUMBER          shift and go to state 3
    NAME            shift and go to state 32
    LPAR            shift and go to state 1
    RPAR            shift and go to state 4
    LSQB            shift and go to state 29
    RSQB            shift and go to state 17
    COLON           shift and go to state 14
    OPERATOR        shift and go to state 28
    COMMENT         shift and go to state 10
    RANGE           shift and go to state 25
    CLASS           shift and go to state 18
    DEF             shift and go to state 8
    IF              shift and go to state 30
    ELIF            shift and go to state 13
    ELSE            shift and go to state 23
    TRY             shift and go to state 24
    EXCEPT          shift and go to state 12
    FINALLY         shift and go to state 34
    WITH            shift and go to state 7
    WHILE           shift and go to state 5
    FOR             shift and go to state 20

  ! COLON           [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! LBRACE          [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! RBRACE          [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! STRING_END      [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! STRING_CONTINUE [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! STRING          [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! STRING_START_TRIPLE [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! WS              [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! STRING_START_SINGLE [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! NUMBER          [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! NAME            [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! LPAR            [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! RPAR            [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! OPERATOR        [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! LSQB            [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! RSQB            [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! RANGE           [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! CLASS           [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! DEF             [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! IF              [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! ELIF            [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! ELSE            [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! TRY             [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! EXCEPT          [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! FINALLY         [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! WITH            [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! WHILE           [ reduce using rule 37 (fragment -> fragment COLON .) ]
  ! FOR             [ reduce using rule 37 (fragment -> fragment COLON .) ]

    fragment                       shift and go to state 21
    suite                          shift and go to state 63
    block                          shift and go to state 36
    stmt                           shift and go to state 22
    block_keyword                  shift and go to state 27

state 62

    (2) block -> block_keyword fragment COLON NEWLINE . INDENT suite DEDENT
    (4) block -> block_keyword fragment COLON NEWLINE .
    (20) stmt -> NEWLINE .

  ! reduce/reduce conflict for NEWLINE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for STRING_END resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for STRING_CONTINUE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for STRING resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for STRING_START_TRIPLE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for WS resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for STRING_START_SINGLE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for NUMBER resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for NAME resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for LPAR resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for RPAR resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for LSQB resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for RSQB resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for COLON resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for COMMENT resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for RANGE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for CLASS resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for DEF resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for IF resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for ELIF resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for ELSE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for TRY resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for EXCEPT resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for FINALLY resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for WITH resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for WHILE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for FOR resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for ENDMARKER resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for DEDENT resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    INDENT          shift and go to state 64
    NEWLINE         reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    LBRACE          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    RBRACE          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    STRING_END      reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    STRING_CONTINUE reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    STRING          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    STRING_START_TRIPLE reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    WS              reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    STRING_START_SINGLE reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    NUMBER          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    NAME            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    LPAR            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    RPAR            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    LSQB            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    RSQB            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    COLON           reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    OPERATOR        reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    COMMENT         reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    RANGE           reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    CLASS           reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    DEF             reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    IF              reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    ELIF            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    ELSE            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    TRY             reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    EXCEPT          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    FINALLY         reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    WITH            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    WHILE           reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    FOR             reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    ENDMARKER       reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    DEDENT          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)

  ! NEWLINE         [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! LBRACE          [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! RBRACE          [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! STRING_END      [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! STRING_CONTINUE [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! STRING          [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! STRING_START_TRIPLE [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! WS              [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! STRING_START_SINGLE [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! NUMBER          [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! NAME            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! LPAR            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! RPAR            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! LSQB            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! RSQB            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! COLON           [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! OPERATOR        [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! COMMENT         [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! RANGE           [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! CLASS           [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! DEF             [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! IF              [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! ELIF            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! ELSE            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! TRY             [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! EXCEPT          [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! FINALLY         [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! WITH            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! WHILE           [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! FOR             [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! ENDMARKER       [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! DEDENT          [ reduce using rule 20 (stmt -> NEWLINE .) ]


state 63

    (3) block -> block_keyword fragment COLON suite .
    (17) suite -> suite . stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment
    (20) stmt -> . NEWLINE
    (21) stmt -> . block
    (22) fragment -> . fragment LBRACE
    (23) fragment -> . fragment RBRACE
    (24) fragment -> . fragment STRING_END
    (25) fragment -> . fragment STRING_CONTINUE
    (26) fragment -> . fragment STRING
    (27) fragment -> . fragment STRING_START_TRIPLE
    (28) fragment -> . fragment WS
    (29) fragment -> . fragment STRING_START_SINGLE
    (30) fragment -> . fragment NUMBER
    (31) fragment -> . fragment NAME
    (32) fragment -> . fragment LPAR
    (33) fragment -> . fragment RPAR
    (34) fragment -> . fragment OPERATOR
    (35) fragment -> . fragment LSQB
    (36) fragment -> . fragment RSQB
    (37) fragment -> . fragment COLON
    (38) fragment -> . fragment block_keyword
    (39) fragment -> . fragment PERIOD
    (40) fragment -> . fragment RANGE
    (41) fragment -> . block_keyword
    (42) fragment -> . LBRACE
    (43) fragment -> . RBRACE
    (44) fragment -> . STRING_END
    (45) fragment -> . STRING_CONTINUE
    (46) fragment -> . STRING
    (47) fragment -> . STRING_START_TRIPLE
    (48) fragment -> . WS
    (49) fragment -> . STRING_START_SINGLE
    (50) fragment -> . NUMBER
    (51) fragment -> . NAME
    (52) fragment -> . LPAR
    (53) fragment -> . RPAR
    (54) fragment -> . LSQB
    (55) fragment -> . RSQB
    (56) fragment -> . COLON
    (57) fragment -> . OPERATOR
    (58) fragment -> . COMMENT
    (59) fragment -> . RANGE
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for STRING_END resolved as shift
  ! shift/reduce conflict for STRING_CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for STRING_START_TRIPLE resolved as shift
  ! shift/reduce conflict for WS resolved as shift
  ! shift/reduce conflict for STRING_START_SINGLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for RPAR resolved as shift
  ! shift/reduce conflict for LSQB resolved as shift
  ! shift/reduce conflict for RSQB resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for RANGE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for EXCEPT resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ENDMARKER       reduce using rule 3 (block -> block_keyword fragment COLON suite .)
    DEDENT          reduce using rule 3 (block -> block_keyword fragment COLON suite .)
    NEWLINE         shift and go to state 11
    LBRACE          shift and go to state 31
    RBRACE          shift and go to state 19
    STRING_END      shift and go to state 16
    STRING_CONTINUE shift and go to state 35
    STRING          shift and go to state 9
    STRING_START_TRIPLE shift and go to state 2
    WS              shift and go to state 6
    STRING_START_SINGLE shift and go to state 26
    NUMBER          shift and go to state 3
    NAME            shift and go to state 32
    LPAR            shift and go to state 1
    RPAR            shift and go to state 4
    LSQB            shift and go to state 29
    RSQB            shift and go to state 17
    COLON           shift and go to state 14
    OPERATOR        shift and go to state 28
    COMMENT         shift and go to state 10
    RANGE           shift and go to state 25
    CLASS           shift and go to state 18
    DEF             shift and go to state 8
    IF              shift and go to state 30
    ELIF            shift and go to state 13
    ELSE            shift and go to state 23
    TRY             shift and go to state 24
    EXCEPT          shift and go to state 12
    FINALLY         shift and go to state 34
    WITH            shift and go to state 7
    WHILE           shift and go to state 5
    FOR             shift and go to state 20

  ! NEWLINE         [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! LBRACE          [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! RBRACE          [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! STRING_END      [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! STRING_CONTINUE [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! STRING          [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! STRING_START_TRIPLE [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! WS              [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! STRING_START_SINGLE [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! NUMBER          [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! NAME            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! LPAR            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! RPAR            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! LSQB            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! RSQB            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! COLON           [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! OPERATOR        [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! COMMENT         [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! RANGE           [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! CLASS           [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! DEF             [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! IF              [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! ELIF            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! ELSE            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! TRY             [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! EXCEPT          [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! FINALLY         [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! WITH            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! WHILE           [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! FOR             [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]

    fragment                       shift and go to state 21
    block                          shift and go to state 36
    stmt                           shift and go to state 38
    block_keyword                  shift and go to state 27

state 64

    (2) block -> block_keyword fragment COLON NEWLINE INDENT . suite DEDENT
    (16) suite -> . stmt
    (17) suite -> . suite stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment
    (20) stmt -> . NEWLINE
    (21) stmt -> . block
    (22) fragment -> . fragment LBRACE
    (23) fragment -> . fragment RBRACE
    (24) fragment -> . fragment STRING_END
    (25) fragment -> . fragment STRING_CONTINUE
    (26) fragment -> . fragment STRING
    (27) fragment -> . fragment STRING_START_TRIPLE
    (28) fragment -> . fragment WS
    (29) fragment -> . fragment STRING_START_SINGLE
    (30) fragment -> . fragment NUMBER
    (31) fragment -> . fragment NAME
    (32) fragment -> . fragment LPAR
    (33) fragment -> . fragment RPAR
    (34) fragment -> . fragment OPERATOR
    (35) fragment -> . fragment LSQB
    (36) fragment -> . fragment RSQB
    (37) fragment -> . fragment COLON
    (38) fragment -> . fragment block_keyword
    (39) fragment -> . fragment PERIOD
    (40) fragment -> . fragment RANGE
    (41) fragment -> . block_keyword
    (42) fragment -> . LBRACE
    (43) fragment -> . RBRACE
    (44) fragment -> . STRING_END
    (45) fragment -> . STRING_CONTINUE
    (46) fragment -> . STRING
    (47) fragment -> . STRING_START_TRIPLE
    (48) fragment -> . WS
    (49) fragment -> . STRING_START_SINGLE
    (50) fragment -> . NUMBER
    (51) fragment -> . NAME
    (52) fragment -> . LPAR
    (53) fragment -> . RPAR
    (54) fragment -> . LSQB
    (55) fragment -> . RSQB
    (56) fragment -> . COLON
    (57) fragment -> . OPERATOR
    (58) fragment -> . COMMENT
    (59) fragment -> . RANGE
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

    NEWLINE         shift and go to state 11
    LBRACE          shift and go to state 31
    RBRACE          shift and go to state 19
    STRING_END      shift and go to state 16
    STRING_CONTINUE shift and go to state 35
    STRING          shift and go to state 9
    STRING_START_TRIPLE shift and go to state 2
    WS              shift and go to state 6
    STRING_START_SINGLE shift and go to state 26
    NUMBER          shift and go to state 3
    NAME            shift and go to state 32
    LPAR            shift and go to state 1
    RPAR            shift and go to state 4
    LSQB            shift and go to state 29
    RSQB            shift and go to state 17
    COLON           shift and go to state 14
    OPERATOR        shift and go to state 28
    COMMENT         shift and go to state 10
    RANGE           shift and go to state 25
    CLASS           shift and go to state 18
    DEF             shift and go to state 8
    IF              shift and go to state 30
    ELIF            shift and go to state 13
    ELSE            shift and go to state 23
    TRY             shift and go to state 24
    EXCEPT          shift and go to state 12
    FINALLY         shift and go to state 34
    WITH            shift and go to state 7
    WHILE           shift and go to state 5
    FOR             shift and go to state 20

    fragment                       shift and go to state 21
    suite                          shift and go to state 65
    block                          shift and go to state 36
    stmt                           shift and go to state 22
    block_keyword                  shift and go to state 27

state 65

    (2) block -> block_keyword fragment COLON NEWLINE INDENT suite . DEDENT
    (17) suite -> suite . stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment
    (20) stmt -> . NEWLINE
    (21) stmt -> . block
    (22) fragment -> . fragment LBRACE
    (23) fragment -> . fragment RBRACE
    (24) fragment -> . fragment STRING_END
    (25) fragment -> . fragment STRING_CONTINUE
    (26) fragment -> . fragment STRING
    (27) fragment -> . fragment STRING_START_TRIPLE
    (28) fragment -> . fragment WS
    (29) fragment -> . fragment STRING_START_SINGLE
    (30) fragment -> . fragment NUMBER
    (31) fragment -> . fragment NAME
    (32) fragment -> . fragment LPAR
    (33) fragment -> . fragment RPAR
    (34) fragment -> . fragment OPERATOR
    (35) fragment -> . fragment LSQB
    (36) fragment -> . fragment RSQB
    (37) fragment -> . fragment COLON
    (38) fragment -> . fragment block_keyword
    (39) fragment -> . fragment PERIOD
    (40) fragment -> . fragment RANGE
    (41) fragment -> . block_keyword
    (42) fragment -> . LBRACE
    (43) fragment -> . RBRACE
    (44) fragment -> . STRING_END
    (45) fragment -> . STRING_CONTINUE
    (46) fragment -> . STRING
    (47) fragment -> . STRING_START_TRIPLE
    (48) fragment -> . WS
    (49) fragment -> . STRING_START_SINGLE
    (50) fragment -> . NUMBER
    (51) fragment -> . NAME
    (52) fragment -> . LPAR
    (53) fragment -> . RPAR
    (54) fragment -> . LSQB
    (55) fragment -> . RSQB
    (56) fragment -> . COLON
    (57) fragment -> . OPERATOR
    (58) fragment -> . COMMENT
    (59) fragment -> . RANGE
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

    DEDENT          shift and go to state 66
    NEWLINE         shift and go to state 11
    LBRACE          shift and go to state 31
    RBRACE          shift and go to state 19
    STRING_END      shift and go to state 16
    STRING_CONTINUE shift and go to state 35
    STRING          shift and go to state 9
    STRING_START_TRIPLE shift and go to state 2
    WS              shift and go to state 6
    STRING_START_SINGLE shift and go to state 26
    NUMBER          shift and go to state 3
    NAME            shift and go to state 32
    LPAR            shift and go to state 1
    RPAR            shift and go to state 4
    LSQB            shift and go to state 29
    RSQB            shift and go to state 17
    COLON           shift and go to state 14
    OPERATOR        shift and go to state 28
    COMMENT         shift and go to state 10
    RANGE           shift and go to state 25
    CLASS           shift and go to state 18
    DEF             shift and go to state 8
    IF              shift and go to state 30
    ELIF            shift and go to state 13
    ELSE            shift and go to state 23
    TRY             shift and go to state 24
    EXCEPT          shift and go to state 12
    FINALLY         shift and go to state 34
    WITH            shift and go to state 7
    WHILE           shift and go to state 5
    FOR             shift and go to state 20

    fragment                       shift and go to state 21
    block                          shift and go to state 36
    stmt                           shift and go to state 38
    block_keyword                  shift and go to state 27

state 66

    (2) block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .

    NEWLINE         reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    LBRACE          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    RBRACE          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    STRING_END      reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    STRING_CONTINUE reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    STRING          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    STRING_START_TRIPLE reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    WS              reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    STRING_START_SINGLE reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    NUMBER          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    NAME            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    LPAR            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    RPAR            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    LSQB            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    RSQB            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    COLON           reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    OPERATOR        reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    COMMENT         reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    RANGE           reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    CLASS           reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    DEF             reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    IF              reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    ELIF            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    ELSE            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    TRY             reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    EXCEPT          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    FINALLY         reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    WITH            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    WHILE           reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    FOR             reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    ENDMARKER       reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    DEDENT          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 21 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 21 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 21 resolved as shift
WARNING: shift/reduce conflict for STRING_END in state 21 resolved as shift
WARNING: shift/reduce conflict for STRING_CONTINUE in state 21 resolved as shift
WARNING: shift/reduce conflict for STRING in state 21 resolved as shift
WARNING: shift/reduce conflict for STRING_START_TRIPLE in state 21 resolved as shift
WARNING: shift/reduce conflict for WS in state 21 resolved as shift
WARNING: shift/reduce conflict for STRING_START_SINGLE in state 21 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 21 resolved as shift
WARNING: shift/reduce conflict for NAME in state 21 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 21 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 21 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 21 resolved as shift
WARNING: shift/reduce conflict for LSQB in state 21 resolved as shift
WARNING: shift/reduce conflict for RSQB in state 21 resolved as shift
WARNING: shift/reduce conflict for COLON in state 21 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 21 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 21 resolved as shift
WARNING: shift/reduce conflict for DEF in state 21 resolved as shift
WARNING: shift/reduce conflict for IF in state 21 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 21 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 21 resolved as shift
WARNING: shift/reduce conflict for TRY in state 21 resolved as shift
WARNING: shift/reduce conflict for EXCEPT in state 21 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 21 resolved as shift
WARNING: shift/reduce conflict for WITH in state 21 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 21 resolved as shift
WARNING: shift/reduce conflict for FOR in state 21 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 27 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 27 resolved as shift
WARNING: shift/reduce conflict for STRING_END in state 27 resolved as shift
WARNING: shift/reduce conflict for STRING_CONTINUE in state 27 resolved as shift
WARNING: shift/reduce conflict for STRING in state 27 resolved as shift
WARNING: shift/reduce conflict for STRING_START_TRIPLE in state 27 resolved as shift
WARNING: shift/reduce conflict for WS in state 27 resolved as shift
WARNING: shift/reduce conflict for STRING_START_SINGLE in state 27 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 27 resolved as shift
WARNING: shift/reduce conflict for NAME in state 27 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 27 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 27 resolved as shift
WARNING: shift/reduce conflict for LSQB in state 27 resolved as shift
WARNING: shift/reduce conflict for RSQB in state 27 resolved as shift
WARNING: shift/reduce conflict for COLON in state 27 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 27 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 27 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 27 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 27 resolved as shift
WARNING: shift/reduce conflict for DEF in state 27 resolved as shift
WARNING: shift/reduce conflict for IF in state 27 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 27 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 27 resolved as shift
WARNING: shift/reduce conflict for TRY in state 27 resolved as shift
WARNING: shift/reduce conflict for EXCEPT in state 27 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 27 resolved as shift
WARNING: shift/reduce conflict for WITH in state 27 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 27 resolved as shift
WARNING: shift/reduce conflict for FOR in state 27 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 61 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 61 resolved as shift
WARNING: shift/reduce conflict for STRING_END in state 61 resolved as shift
WARNING: shift/reduce conflict for STRING_CONTINUE in state 61 resolved as shift
WARNING: shift/reduce conflict for STRING in state 61 resolved as shift
WARNING: shift/reduce conflict for STRING_START_TRIPLE in state 61 resolved as shift
WARNING: shift/reduce conflict for WS in state 61 resolved as shift
WARNING: shift/reduce conflict for STRING_START_SINGLE in state 61 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 61 resolved as shift
WARNING: shift/reduce conflict for NAME in state 61 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 61 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 61 resolved as shift
WARNING: shift/reduce conflict for LSQB in state 61 resolved as shift
WARNING: shift/reduce conflict for RSQB in state 61 resolved as shift
WARNING: shift/reduce conflict for COLON in state 61 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 61 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 61 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 61 resolved as shift
WARNING: shift/reduce conflict for DEF in state 61 resolved as shift
WARNING: shift/reduce conflict for IF in state 61 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 61 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 61 resolved as shift
WARNING: shift/reduce conflict for TRY in state 61 resolved as shift
WARNING: shift/reduce conflict for EXCEPT in state 61 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 61 resolved as shift
WARNING: shift/reduce conflict for WITH in state 61 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 61 resolved as shift
WARNING: shift/reduce conflict for FOR in state 61 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 63 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 63 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 63 resolved as shift
WARNING: shift/reduce conflict for STRING_END in state 63 resolved as shift
WARNING: shift/reduce conflict for STRING_CONTINUE in state 63 resolved as shift
WARNING: shift/reduce conflict for STRING in state 63 resolved as shift
WARNING: shift/reduce conflict for STRING_START_TRIPLE in state 63 resolved as shift
WARNING: shift/reduce conflict for WS in state 63 resolved as shift
WARNING: shift/reduce conflict for STRING_START_SINGLE in state 63 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 63 resolved as shift
WARNING: shift/reduce conflict for NAME in state 63 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 63 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 63 resolved as shift
WARNING: shift/reduce conflict for LSQB in state 63 resolved as shift
WARNING: shift/reduce conflict for RSQB in state 63 resolved as shift
WARNING: shift/reduce conflict for COLON in state 63 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 63 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 63 resolved as shift
WARNING: shift/reduce conflict for RANGE in state 63 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 63 resolved as shift
WARNING: shift/reduce conflict for DEF in state 63 resolved as shift
WARNING: shift/reduce conflict for IF in state 63 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 63 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 63 resolved as shift
WARNING: shift/reduce conflict for TRY in state 63 resolved as shift
WARNING: shift/reduce conflict for EXCEPT in state 63 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 63 resolved as shift
WARNING: shift/reduce conflict for WITH in state 63 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 63 resolved as shift
WARNING: shift/reduce conflict for FOR in state 63 resolved as shift
WARNING: reduce/reduce conflict in state 62 resolved using rule (block -> block_keyword fragment COLON NEWLINE)
WARNING: rejected rule (stmt -> NEWLINE) in state 62
